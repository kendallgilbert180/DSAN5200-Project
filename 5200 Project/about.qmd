---
title: "Quantifying International Prosperity"
code-fold: true
---

## Introduction

How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie's prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country's wellbeing, ultimately suggesting that steps be taken to make this process more holistic

This analysis will dive deeper into factors regarding healthcare, social spending on family benefits, wealth distribution and population trends (life expectancy, birth rates) in an attempt to quantify a country's wellbeing.

a great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn't Add Up. The New Press.

## GDP

## Healthcare

```{r echo=FALSE}
#| warning: false

library(tidyverse)
library(ggplot2)
library(lubridate)
library(plotly)
library(gridExtra)
library(crosstalk)
library(Ecdat)
library(Ecfun)

```

```{r echo=FALSE}
#| warning: false

hospital_beds <- read.csv("Data_cleaned/hospital_beds.csv")
hospital_beds <- hospital_beds %>%
  filter(Year=='2021') %>%
  subset(select=-X)

gdp <- read.csv("Data_Uncleaned/GDP.csv")
gdp <- gdp %>%
  subset(select=c(Time, X2021)) %>%
  rename(Country=Time, gdp=X2021)

data.p1 <- left_join(gdp, hospital_beds, by="Country")
data.p1$gdp<-as.numeric(data.p1$gdp)

```

```{r echo=FALSE}
#| warning: false

p1 <- ggplot() + geom_point(data=data.p1, aes(x=Value, y=gdp),color="#57d4ff") + theme_minimal() + theme(panel.background = element_rect(fill="#faf0e6"), plot.background=element_rect(fill="#faf0e6"), plot.title = element_text(family = "PT Sans Narrow"), axis.title = element_text(family = "PT Sans Narrow"), axis.text = element_text(family = "PT Sans Narrow"))+ labs(title="GDP Compared to Number of Hospital Beds Available in 2021", x="Hospital Beds per Capita", y="GDP") 

ggplotly(p1)
```

```{r echo=FALSE}
#| warning: false

hospital_bed2 <- read.csv("Data_cleaned/hospital_beds.csv")
gdp2 <- read.csv("Data_Uncleaned/GDP.csv")
hospital_stay <- read.csv("Data_cleaned/hospital_stay.csv")

hospital_bed2 <- hospital_bed2 %>%
  subset(select=-X)
gdp2<- gdp2 %>%
  rename(Country=Time) %>%
  pivot_longer(cols=starts_with("X"), names_to="Year.1", values_to="gdp")

gdp2$Year.1<-substr(gdp2$Year.1, 2, 5)
gdp2$key <- paste(gdp2$Country, gdp2$Year.1, sep="")
hospital_bed2$key <- paste(hospital_bed2$Country, hospital_bed2$Year, sep="")
hospital_stay$key <- paste(hospital_stay$Country, hospital_stay$Year, sep="")

data.p2 <- left_join(gdp2, hospital_bed2, by="key") %>%
  left_join(hospital_stay, by="key")


data.p2 <- data.p2 %>%
  subset(select=-c(Country.y, Year.x, key, X, Country.x, Year.y)) %>%
  filter(Year.1 %in% c('2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022')) %>%
  rename(beds=Value.x, stay=Value.y)

data.p2$Year.1<-as.numeric(data.p2$Year.1)
data.p2$gdp<-as.numeric(data.p2$gdp)
data.p2$beds<-as.numeric(data.p2$beds)
data.p2$stay<-as.numeric(data.p2$stay)
```

```{r echo=FALSE}
#| warning: false

library(Ecdat)
library(Ecfun)

shared_data <- SharedData$new(data.p2)

p2 <- shared_data %>%
  plot_ly(x=~gdp, y=~beds) %>%
  add_markers(color=I("#ff6f69")) %>%
  layout(plot_bgcolor="#faf0e6",
         xaxis=list(title="GDP", titlefont=list(family="PT Sans Narrow")),
         yaxis=list(title="Number of Beds", titlefont=list(family="PT Sans Narrow")))

p3 <- shared_data %>%
  plot_ly(x=~stay, y=~beds) %>%
  add_markers(color=I("#57d4ff")) %>%
  layout(plot_bgcolor="#faf0e6",
         xaxis=list(title="Stay length", titlefont=list(family="PT Sans Narrow")))


subplot(p2, p3, titleX=T, shareY=T) %>%
  hide_legend() %>%
  highlight(on='plotly_click') %>%
  layout(
    title="Beds per Capita based on Hospital Stay Length and GDP",
    titlefont=list(family="PT Sans Narrow")
  )
```

```{r echo=FALSE}
#| warning: false

barchart1 <- data.p2 %>%
  filter(Year.1==2021) %>%
  SharedData$new(key=~Country) %>%
  plot_ly() %>%
  add_bars(y=~Country, x= ~beds, color=I("gray"), orientation='h', name="Average Beds per Capita") %>%
  layout(barmode="overlay", plot_bgcolor="#faf0e6",
        xaxis=list(title="Beds per capita", titlefont=list(family="PT Sans Narrow")),
        yaxis=list(title="Country", titlefont=list(family="PT Sans Narrow")))

scatterplot1 <- data.p2 %>%
  SharedData$new(key=~Country) %>%
  plot_ly() %>%
  add_trace(x=~Year.1, y=~beds, mode='lines', color=I("#57d4ff"), name="Hospital Stay")%>%
  layout(plot_bgcolor="#faf0e6", xaxis=list(title="Year", titlefont=list(family="PT Sans Narrow")), yaxis=list(title="Average Length of Stay", titlefont=list(family="PT Sans Narrow")))

scatterplot2 <- data.p2 %>%
  SharedData$new(key=~Country) %>%
  plot_ly() %>%
  add_trace(x=~Year.1, y=~gdp, mode='lines', color=I("#ff6f69"), name="GDP") %>%
  layout(plot_bgcolor="#faf0e6",xaxis=list(title="Year", titlefont=list(family="PT Sans Narrow")), yaxis=list(title="GDP", titlefont=list(family="PT Sans Narrow")))

subplot(barchart1, scatterplot1, scatterplot2, nrows=1, titleX=T)
          
```

## Social Spending

Another important factor that can determine the well-being of a country is social spending in regards to family benefits. OECD countries spend on average 2.29% of GDP on family benefits, with large variations across countries. These variations are evident as illustrated in the bubble chart below.

This spending is beneficial for numerous reasons. First, family benefits help families meet their basic needs. These benefits provide financial assistance that can help with the costs of having a family. By helping families meet their basic needs, social spending on family benefits can improve over wellbeing. Furthermore, spending money on family benefits can directly impact child well-being, healthier work-life balance for parents and economic growth. By supporting families and enabling parents to remain in or return to the workforce, these policies contribute to overall economic stability and prosperity.

Based on the chart below you can see countries like Iceland, Estonia and Luxembourg dedicate a large percentage of their GDP towards family benefits. Countries like this are notorious for prioritizing well-being and it is proven to be working.

```{python echo=FALSE }
#| warning: false

import pandas as pd
import plotly.graph_objects as go
import numpy as np


# Read / Cleaning the data
social_spending = pd.read_csv("Data_cleaned/social_spending.csv", header=1)
gdp = pd.read_csv("Data_cleaned/gdp.csv")
gdp['gdp'] = gdp['gdp'].replace('..', np.nan)
gdp['gdp'] = gdp['gdp'].str.replace(',', '')
gdp['gdp'] = gdp['gdp'].astype(float)
social_spending = social_spending.rename(columns={'Year': 'Country'})
social_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)
social_spending = pd.melt(social_spending, id_vars=['Country'], var_name='Year', value_name='s_s')
social_spending['Country_Year'] = social_spending['Country'] + '_' + social_spending['Year'].astype(str)

merged_data = pd.merge(gdp, social_spending, on=['Country_Year'])
merged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')
merged_data['s_s'] = pd.to_numeric(merged_data['s_s'], errors='coerce')
#merged_data['gdp'] = merged_data['gdp'].fillna(merged_data['gdp'].mean())
#merged_data['s_s'] = merged_data['s_s'].fillna(merged_data['s_s'].mean())


average_social_spending = merged_data.groupby('Country')['s_s'].mean().reset_index()
average_gdp = merged_data.groupby('Country')['gdp'].mean().reset_index()
average_data = pd.merge(average_social_spending, average_gdp, on='Country', suffixes=('_s_s', '_gdp'))
average_data['s_s_gdp_ratio'] = average_data['s_s'] / average_data['gdp']

color_map = {
    'Australia': 'rgb(255, 0, 0)',        # Red
    'Austria': 'rgb(0, 255, 0)',          # Green
    'Belgium': 'rgb(0, 0, 255)',          # Blue
    'Canada': 'rgb(255, 255, 0)',         # Yellow
    'Chile': 'rgb(255, 0, 255)',          # Magenta
    'Colombia': 'rgb(0, 255, 255)',       # Cyan
    'Costa Rica': 'rgb(255, 127, 0)',     # Orange
    'Czechia': 'rgb(255, 0, 127)',        # Reddish-Pink
    'Denmark': 'rgb(0, 127, 255)',        # Bluish
    'Estonia': 'rgb(127, 255, 0)',        # Greenish-Yellow
    'Finland': 'rgb(0, 255, 127)',        # Greenish
    'France': 'rgb(127, 0, 255)',         # Purplish-Blue
    'Germany': 'rgb(255, 255, 127)',      # Light Yellow
    'Greece': 'rgb(127, 255, 255)',       # Light Cyan
    'Hungary': 'rgb(255, 127, 255)',      # Light Magenta
    'Iceland': 'rgb(255, 0, 0)',          # Red
    'Ireland': 'rgb(0, 255, 0)',          # Green
    'Israel': 'rgb(0, 0, 255)',           # Blue
    'Italy': 'rgb(255, 255, 0)',          # Yellow
    'Japan': 'rgb(255, 0, 255)',          # Magenta
    'Korea': 'rgb(0, 255, 255)',          # Cyan
    'Latvia': 'rgb(255, 127, 0)',         # Orange
    'Lithuania': 'rgb(255, 0, 127)',      # Reddish-Pink
    'Luxembourg': 'rgb(0, 127, 255)',     # Bluish
    'Mexico': 'rgb(127, 255, 0)',         # Greenish-Yellow
    'Netherlands': 'rgb(0, 255, 127)',    # Greenish
    'New Zealand': 'rgb(127, 0, 255)',    # Purplish-Blue
    'Norway': 'rgb(255, 255, 127)',      # Light Yellow
    'Poland': 'rgb(127, 255, 255)',       # Light Cyan
    'Portugal': 'rgb(255, 127, 255)',     # Light Magenta
    'Slovak Republic': 'rgb(255, 0, 0)',  # Red
    'Slovenia': 'rgb(0, 255, 0)',         # Green
    'Spain': 'rgb(0, 0, 255)',            # Blue
    'Sweden': 'rgb(255, 255, 0)',         # Yellow
    'Switzerland': 'rgb(255, 0, 255)',    # Magenta
    'Türkiye': 'rgb(0, 255, 255)',        # Cyan
    'United Kingdom': 'rgb(255, 127, 0)', # Orange
    'United States': 'rgb(255, 0, 127)',  # Reddish-Pink
}

average_data['color'] = average_data['Country'].map(color_map)
bubble_sizes = average_data['s_s_gdp_ratio'] * 1000

fig = go.Figure(data=go.Scatter(
    x=average_data['s_s_gdp_ratio'],
    y=average_data['gdp'],
    mode='markers',
    marker=dict(
        size=bubble_sizes,
        sizemode='area',
        sizeref=2.*max(bubble_sizes)/(100**2),
        sizemin=4,
        color=average_data['color']
    ),
    text = average_data.apply(lambda row: f"Country: {row['Country']}<br>Avg Social Spending: {row['s_s']:.4f}<br>Avg GDP: {row['gdp']:.4f}<br>Ratio: {row['s_s_gdp_ratio']:.4f}", axis=1)
))

fig.update_layout(
    title='Percentage of GDP Spent on Family Benefits',
    xaxis=dict(title='Average Percentage of GDP spent on Family Benefits'),  
    yaxis=dict(title='Average GDP (Billions) Over 20 Years'),
    plot_bgcolor='#faf0e6', 
    font_color='black',
    xaxis_title_font=dict(family='PT Sans Narrow'),
    xaxis_tickfont=dict(family='PT Sans Narrow'),
    yaxis_title_font=dict(family='PT Sans Narrow'),
    yaxis_tickfont=dict(family='PT Sans Narrow'),
    showlegend=False
)

```

There is a drastic difference between countries like Iceland and the United States.

```{python echo=FALSE}
#| warning: false

import plotly.graph_objects as go

# Formatting function to round to three decimal places
def format_decimal(value):
    return f'{value:.3f}'

fig = go.Figure(data=[go.Table(
    header=dict(values=['<b>Country</b>', '<b>Average Percentage Spent</b>', '<b>Average GDP (Billions)</b>', '<b>Percentage of Average Social Spending out of GDP (%)</b>'],
                line_color='black',
                fill_color='#f7ebdb',
                align='left'),
    cells=dict(values=[average_data['Country'],
                       average_data['s_s'].apply(format_decimal),
                       average_data['gdp'].apply(format_decimal),
                       average_data['s_s_gdp_ratio'].apply(format_decimal)],
               line_color='black',
               fill_color='white',
               align='left'))
])

fig.update_layout(width=800, height=500)
```


## Education

Education plays a large role in the overall well-being of a Country. Specifically, the quantity of people with the education uquivalent of a Bachelors and Masters can help improve a country in regard to economic development, workforce skills and global competitiveness. Within the chart below, the OECD countries have been separated by their specific regions. The bar chart illustrates the total number of people with Bachelor Degrees and Masters Degrees by Region.

```{python echo=FALSE}
#| warning: false

import pandas as pd
import plotly.graph_objects as go
import numpy as np

# Read / Cleaning the data
education = pd.read_csv("Data_cleaned/education.csv", header=1)

education = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)

gdp = pd.read_csv("Data_cleaned/gdp.csv")
gdp['gdp'] = gdp['gdp'].replace('..', np.nan)
gdp['gdp'] = gdp['gdp'].str.replace(',', '')
gdp['gdp'] = gdp['gdp'].astype(float)
gdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)
gdp_2001 = gdp[gdp['Year'] == '2021']

education_gdp = pd.merge(gdp_2001, education, on=['Country'])



education_gdp = education_gdp[['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level', 'gdp']]

country_to_region = {
    'USA': 'North America',
    'Canada': 'North America',
    'Germany': 'Europe',
    'France': 'Europe',
    'Australia': 'Oceania',
    'Austria': 'Europe',
    'Belgium': 'Europe',
    'Chile': 'South America',
    'Colombia': 'South America',
    'Costa Rica': 'North America',
    'Czechia': 'Europe',
    'Denmark': 'Europe',
    'Estonia': 'Europe',
    'Finland': 'Europe',
    'Greece': 'Europe',
    'Hungary': 'Europe',
    'Iceland': 'Europe',
    'Ireland': 'Europe',
    'Israel': 'Middle East',
    'Italy': 'Europe',
    'Japan': 'Asia',
    'Korea': 'Asia',
    'Latvia': 'Europe',
    'Lithuania': 'Europe',
    'Luxembourg': 'Europe',
    'Mexico': 'North America',
    'Netherlands': 'Europe',
    'New Zealand': 'Oceania',
    'Norway': 'Europe',
    'Poland': 'Europe',
    'Portugal': 'Europe',
    'Slovak Republic': 'Europe',
    'Slovenia': 'Europe',
    'Spain': 'Europe',
    'Sweden': 'Europe',
    'Switzerland': 'Europe',
    'Turkey': 'Europe',
    'United Kingdom': 'Europe',
    'United States': 'North America',
    'Türkiye': 'Middle East'
    
}


education_gdp['Region'] = education_gdp['Country'].map(country_to_region)
unique_regions = education_gdp['Region'].unique()

import pandas as pd
import plotly.express as px
average_gdp_by_region = education_gdp.groupby('Region')['gdp'].mean().reset_index()
sum_by_region = education_gdp.groupby('Region')[['Bachelor’s or equivalent level', 'Master’s or equivalent level']].sum()

test  = pd.merge(average_gdp_by_region,sum_by_region, on='Region' )


melted_test = test.melt(id_vars=['Region', 'gdp'], value_vars=['Bachelor’s or equivalent level', 'Master’s or equivalent level'],
                        var_name='Education Level', value_name='Total Count')

fig = px.bar(melted_test, x='Region', y='Total Count', color='Education Level',
             title='OECD Total Bachelor\'s and Master\'s Degrees by Region (2021)',
             hover_data={'Region': True, 'Total Count': True, 'gdp': True},
             labels={'Total Count': 'Total Count (Millions)', 'Education Level': 'Education Level'},
             barmode='group',
             base='gdp',
             color_discrete_map={'Bachelor’s or equivalent level': '#84cf63', 
                                 'Master’s or equivalent level': '#3d682b'}
             )

fig.update_traces(customdata=melted_test[['Education Level', 'gdp']], 
                  width=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
                  hovertemplate='<br>'.join([
                      'Region: %{x}',
                      'Education Level: %{customdata[0]}',
                      'Total Count: %{y:,.0f}',
                      'Average GDP: $%{customdata[1]:,.2f} (Billions)'
                  ]));

fig.add_annotation(
    x="North America",
    y=3023000,
    text="Highest Average GDP",
    xanchor="center",
    arrowhead=2
);

fig.add_annotation(
    x="South America",
    y=392195,
    text="Lowest Average GDP",
    xanchor="center",
    arrowhead=2
);

fig.update_layout(
    plot_bgcolor='#faf0e6',
    font_color='black',
    title_font_family='PT Sans Narrow',
    xaxis=dict(
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    yaxis=dict(
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    legend=dict(
        font=dict(family='PT Sans Narrow')
    )
);

fig.show()

```

## Life Expectancy

```{python}
import pandas as pd
import plotly.graph_objects as go

#Import datasets for merging
df1 = pd.read_csv("Data_cleaned/overall.csv")
df2 = pd.read_csv("Data_cleaned/male.csv")
df3 = pd.read_csv("Data_cleaned/female.csv")
df4 = pd.read_csv("Data_cleaned/gdppc.csv")

#Merge on Country and Year columns
df5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')
df5 = df5.drop_duplicates(['Country', 'Year'])
df5 = df5.rename(columns={'Overall': 'Life Expectancy'})
#Round GDP Per Capita
df5["GDP Per Capita (USD)"] = df5["GDP Per Capita (USD)"].round(2)
#Save merged data
df5.to_csv("Data_cleaned/lifeexpectancy.csv", index=False)
#Sort by GDP per capita highest to lowest
df5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)

# Filter out null values for GDP per capita
df5 = df5.dropna(subset=['GDP Per Capita (USD)'])

# Create a function that will allow me to change plot based on year
def update_plot(year):
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()

    fig = go.Figure()

    # Add barplot
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        name='Life Expectancy',
        marker=dict(color='#96ceb4'),
        #tooltip
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]
    ))

    # Add moving average line for life expectancy trend across gdp per capita
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name='Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']]
    ))

    # Layout settings
    fig.update_layout(
        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',
        xaxis_title='Country',
        yaxis_title='Life Expectancy',
        xaxis_tickangle=-45,
        yaxis=dict(range=[60, 90]),
        barmode='group',
        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
        hovermode='closest',
        plot_bgcolor='#faf0e6',
        width=1200,
        height=800
    )

    fig.show()


# All years to be displayed (1990-2022)
years = df5['Year'].unique().tolist()

# Create Plotly button
buttons = []
for year in years:
    button = dict(
        label=str(year),
        method="update",
        args=[{"visible": [year == y for y in years]}, {"title": f"Life Expectancy in {year} (Sorted by GDP Per Capita)"}],
    )
    buttons.append(button)

fig = go.Figure()

# Add barplot for each of the years
for year in years:
    year_df = df5[df5['Year'] == year]
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        marker = dict(color='#96ceb4'),
        name=str(year),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],
        visible=(year == years[0])  # Have it so most recent year (2022) is default
    ));

# Add moving average line for each year
for year in years:
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name=f'{year} Life Expectancy Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']],
        visible=(year == years[0])
    ));

# Find the minimum life expectancy across years
min_life_expectancy = df5['Life Expectancy'].min()

# Edit range of plot so bars fit nicely
y_axis_range = [min_life_expectancy - 3, 90]

# Update the layout
fig.update_layout(
    updatemenus=[
        dict(
            buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=1.05,  # Moves button to top right of plot
            xanchor="right",
            y=1.0,
            yanchor="top"
        ),
    ],
    xaxis_title='Country',
    yaxis_title='Life Expectancy',
    xaxis_tickangle=-45,
    yaxis=dict(range=y_axis_range), 
    barmode='group',
    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
    bargap=0.15,
    width=800,
    height= 520,
    bargroupgap=0.1,
    hovermode='closest',
    plot_bgcolor='#faf0e6',
    font_family = 'PT Sans Narrow',
    title=f"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)"
);

fig.update_layout(font_color='black')

fig.show()
```

## Population

## Wealth

## Innovative Chart

## Conclusion
