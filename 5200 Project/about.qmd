---
title: "Quantifying International Prosperity"
code-fold: true
---

## Introduction

How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie's prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country's wellbeing, ultimately suggesting that steps be taken to make this process more holistic

This analysis will dive deeper into factors regarding healthcare, social spending on family benefits and wealth distributionin an attempt to quantify a country's wellbeing. This project will walk through a visual narrative with the end result being a radar chart that has the ability to show a countries overall well-being. 

A great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn't Add Up. The New Press.

## Healthcare

One of the major factors that tends to be considered when people are evaluating the success of a country is the state of the healthcare system. Are people able to access care? Can people afford care? How healthy are citizens on average? Given the importance of healthcare for quality of life, we should definitely consider how GDP and indicators of strong healthcare are related.

```{r echo=FALSE}
#| warning: false

library(tidyverse)
library(ggplot2)
library(lubridate)
library(plotly)
library(gridExtra)
library(crosstalk)
library(Ecdat)
library(Ecfun)
library(reshape2)
```

```{r echo=FALSE}
#| warning: false

hospital_beds <- read.csv("Data_cleaned/hospital_beds.csv")
hospital_beds <- hospital_beds %>%
  filter(Year=='2021') %>%
  subset(select=-X)

gdp <- read.csv("Data_Uncleaned/GDP.csv")
gdp <- gdp %>%
  subset(select=c(Time, X2021)) %>%
  rename(Country=Time, gdp=X2021)

data.p1 <- left_join(gdp, hospital_beds, by="Country")
data.p1$gdp<-as.numeric(data.p1$gdp)

data.p1 <- left_join(gdp, hospital_beds, by="Country")
data.p1$gdp<-as.numeric(data.p1$gdp)
data.p1 <- data.p1 %>%
  rename(GDP=gdp, Beds=beds)

```

```{r echo=FALSE}
#| warning: false

p1 <- ggplot() + geom_point(data=data.p1, aes(x=Beds, y=GDP, text=Country),color="#57d4ff") + theme_minimal() + theme(panel.background = element_rect(fill="#faf0e6"), plot.background=element_rect(fill="#faf0e6"), plot.title = element_text(family = "PT Sans Narrow"), axis.title = element_text(family = "PT Sans Narrow"), axis.text = element_text(family = "PT Sans Narrow"))+ labs(title="GDP Compared to Number of Hospital Beds Available in 2021", x="Hospital Beds (per 1000 inhabitants)", y="GDP (In thousand millions)") 

ggplotly(p1)%>%
  add_markers(hovertemplate = paste('<br><i>Beds</i>: $%{Beds:.2f}',
                        '<br><b>GDP</b>: %{gdp}<br>',
                        '<b>%{Country}</b>'))
```

When looking at the comparison of a country's GDP to its number of hospital beds per 1000 inhabitants we do not see much of an association. The ratio of available hospital beds to the inhabitants of an area is a very important indicator of the strength and health of a healthcare system. The amount of hospital beds can be a huge limiting factor for the accessibility and quality of healthcare received. If the ratio of beds to inhabitants is really low, then hospitals can reach capacity and not be able to continue to offer care or they may be very focused on having a quick turnover at the expense of providing the best care.

The highest beds ratio is in Austria where they have 6.91 beds per 1000 inhabitants. Austria's GDP is also on the higher end, however we can also see that some countries such as Lithuania and Slovakia have similarly high bed ratios (above 6 per 1000 inhabitants), but they are towards the bottom of the pack when it comes to GDP. Additionally, Sweden had one of the highest GDPs in 2021 but they only had 2 beds per 1000 inhabitants. Overall, we can conclude that GDP and number of hospital beds are not necessarily correlated--- but how might these two factors relate to other indicators of the healthcare system?

```{r echo=FALSE}
#| warning: false

hospital_bed2 <- read.csv("Data_cleaned/hospital_beds.csv")
gdp2 <- read.csv("Data_Uncleaned/GDP.csv")
hospital_stay <- read.csv("Data_cleaned/hospital_stay.csv")
doctors<-read.csv("Data_cleaned/doctors.csv")
immunization <- read.csv("Data_cleaned/immunization.csv")
cancer_screening <- read.csv("Data_cleaned/cancer_screening.csv")

hospital_bed2 <- hospital_bed2 %>%
  subset(select=-X)
hospital_stay <- hospital_stay %>%
  subset(select=-X)
doctors <- doctors %>%
  subset(select=-X)
immunization <- immunization %>%
  subset(select=-X)
cancer_screening <- cancer_screening %>%
  subset(select=-X) %>%
  rename(cervical_cancer_screening=breast_cancer_screening)
gdp2<- gdp2 %>%
  rename(Country=Time) %>%
  pivot_longer(cols=starts_with("X"), names_to="Year.1", values_to="gdp")

gdp2$Year.1<-substr(gdp2$Year.1, 2, 5)
gdp2$key <- paste(gdp2$Country, gdp2$Year.1, sep="")
hospital_bed2$key <- paste(hospital_bed2$Country, hospital_bed2$Year, sep="")
hospital_stay$key <- paste(hospital_stay$Country, hospital_stay$Year, sep="")
doctors$key <- paste(doctors$Country, doctors$Year, sep="")
immunization$key <- paste(immunization$Country, immunization$Year, sep="")
cancer_screening$key <- paste(cancer_screening$Country, cancer_screening$Year, sep="")


data.p2 <- inner_join(gdp2, hospital_bed2, by="key") %>%
  inner_join(hospital_stay, by="key") %>%
  inner_join(doctors, by="key") %>%
  inner_join(immunization, by="key") %>%
  inner_join(cancer_screening, by="key")


data.p2 <- data.p2 %>%
  subset(select=c(Country.x, Year.1, gdp, beds, length_of_stay, practicing_physicians, measles_vaccination, cervical_cancer_screening))  %>%
  rename(Country=Country.x, Year=Year.1)



data.p2$Year<-as.numeric(data.p2$Year)
data.p2$gdp<-as.numeric(data.p2$gdp)
data.p2$beds<-as.numeric(data.p2$beds)
data.p2$length_of_stay<-as.numeric(data.p2$length_of_stay)
data.p2$practicing_physicians<-as.numeric(data.p2$practicing_physicians)
data.p2$measles_vaccination<-as.numeric(data.p2$measles_vaccination)
data.p2$cervical_cancer_screening<-as.numeric(data.p2$cervical_cancer_screening)
```

```{r echo=FALSE}
#| warning: false
#| fig-cap: "Figure 2: Correlation of Healthcare System Indicators and GDP"


correlation_mat<-data.p2 %>%
  na.omit() %>%
  subset(select=-c(Country, Year)) %>%
  cor()

melted<- melt(correlation_mat)

cor_plot<-melted %>% ggplot() +
  geom_tile(aes(x=Var1, y=Var2, fill=value)) +
  theme_minimal() + theme(panel.background = element_rect(fill="#faf0e6"), plot.background=element_rect(fill="#faf0e6"), plot.title = element_text(family = "PT Sans Narrow"), axis.title = element_text(family = "PT Sans Narrow"), axis.text = element_text(family = "PT Sans Narrow"), axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1))+ labs(title="Correlation of Healthcare System Indicators and GDP")+ scale_fill_gradient2(low="white", high="#57d4ff", name="Correlation")

ggplotly(cor_plot)

```

From the heatmap of correlation between GDP and several healthcare indicators we see that GDP has pretty weak associations with all of the healthcare indicators. We looked at ratio of hospital beds, average length of hospital stays, per capita number of practicing physicians, percent of children who receive the measles vaccine, and percent of women aged 20-65 who have been screened for cervical cancer. Some of these healthcare indicators have a mild associations with each other, but the association with GDP is minimal.

The strongest correlation between healthcare indicators was between ratio of hospital beds and the average length of stay in the hospital.

```{r echo=FALSE}
#| warning: false
#| fig-cap: "Figure 3: Beds Per Capita Based on Hospital Stay Length and GDP"
library(Ecdat)
library(Ecfun)

shared_data <- SharedData$new(data.p2)

p2 <- shared_data %>%
  plot_ly(x=~gdp, y=~beds, text=~Country, name="GDP") %>%
  add_markers(color=I("#ff6f69")) %>%
  layout(plot_bgcolor="#faf0e6",
         xaxis=list(title="GDP", titlefont=list(family="PT Sans Narrow")),
         yaxis=list(title="Number of Beds", titlefont=list(family="PT Sans Narrow")))

p3 <- shared_data %>%
  plot_ly(x=~length_of_stay, y=~beds, text=~Country, name="Stay Length") %>%
  add_markers(color=I("#57d4ff")) %>%
  layout(plot_bgcolor="#faf0e6",
         xaxis=list(title="Stay length", titlefont=list(family="PT Sans Narrow")))


subplot(p2, p3, titleX=T, shareY=T) %>%
  hide_legend() %>%
  highlight(on='plotly_click') %>%
  layout(
    title="Beds per Capita based on Hospital Stay Length and GDP",
    titlefont=list(family="PT Sans Narrow")
  )
```

The side by side comparison of number of hospital beds as it relates to both GDP and average stay length shows that number of beds, while not associated with GDP, is associated with other characteristics of the healthcare system. GDP not being strongly associated with indicators of strong health care systems does mean that GDP might not be a great holistic measure of a country's success. But number of hospital beds could be used as one factor in a more holistic approach to evaluating countries.

## Social Spending on Family Benefits

Another important factor that can determine the well-being of a country is social spending in regards to family benefits. OECD countries spend on average 2.29% of GDP on family benefits, with large variations across countries. These variations are evident as illustrated in the bubble chart below.

This spending is beneficial for numerous reasons. First, family benefits help families meet their basic needs. These benefits provide financial assistance that can help with the costs of having a family. By helping families meet their basic needs, social spending on family benefits can improve over wellbeing. Furthermore, spending money on family benefits can directly impact child well-being, healthier work-life balance for parents and economic growth. By supporting families and enabling parents to remain in or return to the workforce, these policies contribute to overall economic stability and prosperity.

Based on the chart below you can see countries like Luxembourg, Denmark and Norway dedicate a large percentage of their GDP towards family benefits. Countries like this are notorious for prioritizing well-being and it is proven to be working.

```{python echo=FALSE }
#| fig-cap: "Figure 4: Social Spending on Family Benefits"
#| warning: false
import pandas as pd
import plotly.graph_objects as go
import numpy as np
def format_decimal(value):
    return f'{value:.3f}'

# Read / Cleaning the data
social_spending = pd.read_csv("Data_cleaned/social_spending.csv", header=1)
gdp = pd.read_csv("Data_cleaned/gdp.csv")
gdp['gdp'] = gdp['gdp'].replace('..', np.nan)
gdp['gdp'] = gdp['gdp'].str.replace(',', '')
gdp['gdp'] = gdp['gdp'].astype(float)
social_spending = social_spending.rename(columns={'Year': 'Country'})
social_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)
social_spending = pd.melt(social_spending, id_vars=['Country'], var_name='Year', value_name='s_s')
social_spending['Country_Year'] = social_spending['Country'] + '_' + social_spending['Year'].astype(str)

gdp_new = pd.read_csv("/Users/kendallgilbert/DSAN5200-Project/5200 Project/Data_cleaned/gdppc.csv", header=0)
gdp_new.rename(columns={'GDP Per Capita (USD)': 'gdp'}, inplace=True)
gdp_new['Country_Year'] = gdp_new.apply(lambda x: f"{x['Country']}_{x['Year']}", axis=1)
gdp_new.drop(columns=['Country', 'Year'], inplace=True)

merged_data = pd.merge(gdp_new, social_spending, on=['Country_Year'])
merged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')
merged_data['s_s'] = pd.to_numeric(merged_data['s_s'], errors='coerce')

average_social_spending = merged_data.groupby('Country')['s_s'].mean().reset_index()
average_gdp = merged_data.groupby('Country')['gdp'].mean().reset_index()
average_data = pd.merge(average_social_spending, average_gdp, on='Country', suffixes=('_s_s', '_gdp'))
average_data['s_s_gdp_ratio'] = average_data['s_s'] / average_data['gdp']

# Mapping of countries to regions
country_to_region = {
    'USA': 'North America',
    'Canada': 'North America',
    'Germany': 'Europe',
    'France': 'Europe',
    'Australia': 'Oceania',
    'Austria': 'Europe',
    'Belgium': 'Europe',
    'Chile': 'South America',
    'Colombia': 'South America',
    'Costa Rica': 'North America',
    'Czechia': 'Europe',
    'Denmark': 'Europe',
    'Estonia': 'Europe',
    'Finland': 'Europe',
    'Greece': 'Europe',
    'Hungary': 'Europe',
    'Iceland': 'Europe',
    'Ireland': 'Europe',
    'Israel': 'Middle East',
    'Italy': 'Europe',
    'Japan': 'Asia',
    'Korea': 'Asia',
    'Latvia': 'Europe',
    'Lithuania': 'Europe',
    'Luxembourg': 'Europe',
    'Mexico': 'North America',
    'Netherlands': 'Europe',
    'New Zealand': 'Oceania',
    'Norway': 'Europe',
    'Poland': 'Europe',
    'Portugal': 'Europe',
    'Slovak Republic': 'Europe',
    'Slovenia': 'Europe',
    'Spain': 'Europe',
    'Sweden': 'Europe',
    'Switzerland': 'Europe',
    'Turkey': 'Europe',
    'United Kingdom': 'Europe',
    'United States': 'North America',
    'Türkiye': 'Middle East'
}

# Define color map for each region
region_color_map = {
    'North America': '#D64045',     
    'Europe': '#694966',             
    'Oceania': '#9ED8DB',            
    'South America': '#467599',   
    'Asia': '#1D3354',             
    'Middle East': '#EBBAB9'       
}

# Assign colors based on regions
average_data['region'] = average_data['Country'].map(country_to_region)
average_data['color'] = average_data['region'].map(region_color_map)
bubble_size = 10
# Create the bubble plot
fig = go.Figure(data=go.Scatter(
    x=average_data['s_s'],
    y=average_data['gdp'],
    mode='markers',
    marker=dict(
        size=bubble_size,
        sizemode='diameter',
        color=average_data['color']
    ),
    text=average_data.apply(lambda row: f"Country: {row['Country']}<br>Avg Social Spending: {format_decimal(row['s_s'])}<br>Avg GDP: {format_decimal(row['gdp'])}", axis=1)
));

# Update layout
fig.update_layout(
    title='Percentage of GDP Spent on Family Benefits',
    xaxis=dict(
        title='Average Percentage of GDP spent on Family Benefits Over 20 Years',
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    yaxis=dict(
        title='Average GDP Per Capita Over 20 Years (Thousands)',
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    showlegend=True,
    legend=dict(
        title='Region',
        title_font=dict(family='PT Sans Narrow'),
        font=dict(family='PT Sans Narrow')
    ),
    plot_bgcolor='#faf0e6',
    font_color='black'
);

# Add fake traces for legend
for region, color in region_color_map.items():
    fake_trace = go.Scatter(
        x=[None],
        y=[None],
        mode='markers',
        marker=dict(
            size=10,
            color=color,
            opacity=0.7
        ),
        name=region
    )
    fig.add_trace(fake_trace)
```
Based of the scatter plot there is a small positive correlation between GDP per Capita and Percentage of Social Spending. It can be inferred that European countries spend more on family benefits. Countries that do especially well include Luxembourg and Norway. Below is a table created to show the relation between countries, their GDP Per Capita and the Average Percentage Spent towards family benefits. 

```{python echo=FALSE}
#| warning: false
#| fig-cap: "Table 1: Average Pecentage Spent Towards Family Benefits"
import plotly.graph_objects as go

# Formatting function to round to three decimal places
def format_decimal(value):
    return f'{value:.3f}'

fig = go.Figure(data=[go.Table(
    header=dict(values=['<b>Country</b>', '<b>Average Percentage Spent</b>', '<b>Average GDP Per Capita</b>'],
                line_color='black',
                fill_color='#f7ebdb',
                align='left'),
    cells=dict(values=[average_data['Country'],
                       average_data['s_s'].apply(format_decimal),
                       average_data['gdp'].apply(format_decimal),
                       ],
               line_color='black',
               fill_color='white',
               align='left'))
])

fig.update_layout(width=800, height=500)
```

## Education

Education plays a large role in the overall well-being of a Country. Specifically, the quantity of people with the education uquivalent of a Bachelors and Masters can help improve a country in regard to economic development, workforce skills and global competitiveness. Within the chart below, the OECD countries have been separated by their specific regions. The bar chart illustrates the total number of people with Bachelor Degrees and Masters Degrees by Region.

```{python echo=FALSE}
#| warning: false
#| fig-cap: "Figure 5: Education Count by Region"

import pandas as pd
import plotly.graph_objects as go
import numpy as np

# Read / Cleaning the data
education = pd.read_csv("Data_cleaned/education.csv", header=1)

education = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)

#gdp = pd.read_csv("Data_cleaned/gdp.csv")
#dp['gdp'] = gdp['gdp'].str.replace(',', '')
#gdp['gdp'] = gdp['gdp'].astype(float)
#gdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)
#gdp_2001 = gdp[gdp['Year'] == '2021']

#education_gdp = pd.merge(gdp_2001, education, on=['Country'])

gdp_new = pd.read_csv("/Users/kendallgilbert/DSAN5200-Project/5200 Project/Data_cleaned/gdppc.csv", header=0)

gdp_new = gdp_new[gdp_new['Year'] == 2021]

education_gdp = pd.merge(gdp_new, education, on=['Country'])
education_gdp.rename(columns = {'GDP Per Capita (USD)':'gdp'}, inplace = True) 


#education_gdp = education_gdp[['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level', 'gdp']]

country_to_region = {
    'USA': 'North America',
    'Canada': 'North America',
    'Germany': 'Europe',
    'France': 'Europe',
    'Australia': 'Oceania',
    'Austria': 'Europe',
    'Belgium': 'Europe',
    'Chile': 'South America',
    'Colombia': 'South America',
    'Costa Rica': 'North America',
    'Czechia': 'Europe',
    'Denmark': 'Europe',
    'Estonia': 'Europe',
    'Finland': 'Europe',
    'Greece': 'Europe',
    'Hungary': 'Europe',
    'Iceland': 'Europe',
    'Ireland': 'Europe',
    'Israel': 'Middle East',
    'Italy': 'Europe',
    'Japan': 'Asia',
    'Korea': 'Asia',
    'Latvia': 'Europe',
    'Lithuania': 'Europe',
    'Luxembourg': 'Europe',
    'Mexico': 'North America',
    'Netherlands': 'Europe',
    'New Zealand': 'Oceania',
    'Norway': 'Europe',
    'Poland': 'Europe',
    'Portugal': 'Europe',
    'Slovak Republic': 'Europe',
    'Slovenia': 'Europe',
    'Spain': 'Europe',
    'Sweden': 'Europe',
    'Switzerland': 'Europe',
    'Turkey': 'Europe',
    'United Kingdom': 'Europe',
    'United States': 'North America',
    'Türkiye': 'Middle East'
    
}


education_gdp['Region'] = education_gdp['Country'].map(country_to_region)
unique_regions = education_gdp['Region'].unique()

import pandas as pd
import plotly.express as px

average_gdp_by_region = education_gdp.groupby('Region')['gdp'].mean().reset_index()
sum_by_region = education_gdp.groupby('Region')[['Bachelor’s or equivalent level', 'Master’s or equivalent level']].sum()

test  = pd.merge(average_gdp_by_region,sum_by_region, on='Region' )


melted_test = test.melt(id_vars=['Region', 'gdp'], value_vars=['Bachelor’s or equivalent level', 'Master’s or equivalent level'],
                        var_name='Education Level', value_name='Total Count')

fig = px.bar(melted_test, x='Region', y='Total Count', color='Education Level',
             title='OECD Total Bachelor\'s and Master\'s Degrees by Region (2021)',
             hover_data={'Region': True, 'Total Count': True, 'gdp': True},
             labels={'Total Count': 'Total Count (Millions)', 'Education Level': 'Education Level'},
             barmode='group',
             base='gdp',
             color_discrete_map={'Bachelor’s or equivalent level': '#84cf63', 
                                 'Master’s or equivalent level': '#3d682b'}
             )

fig.update_traces(customdata=melted_test[['Education Level', 'gdp']], 
                  width=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5],
                  hovertemplate='<br>'.join([
                      'Region: %{x}',
                      
                      'Total Count: %{y:,.0f}',
                      'Average GDP Per Capita: $%{customdata[1]:,.2f}'
                  ]));

fig.add_annotation(
    x="North America",
    y=3023000,
    text="Highest Average GDP",
    xanchor="center",
    arrowhead=2
);

fig.add_annotation(
    x="South America",
    y=392195,
    text="Lowest Average GDP",
    xanchor="center",
    arrowhead=2
);

fig.update_layout(
    plot_bgcolor='#faf0e6',
    font_color='black',
    title_font_family='PT Sans Narrow',
    xaxis=dict(
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    yaxis=dict(
        title_font=dict(family='PT Sans Narrow'),
        tickfont=dict(family='PT Sans Narrow')
    ),
    legend=dict(
        font=dict(family='PT Sans Narrow')
    )
);

fig.show()
```
From this bar graph you can see that North America has the highest count of Bachelor's Degrees whereas Europe has the highest count of Master's Degrees. These results are interesting because if you look at the average GDP Per Capita throughout the past 20 years, the United States has the fourth highest GDP per Capita and Europe has the highest. This allows us to infer that even if GDP is not the highest, the education graduation rate for higher level degrees is not dependant on GDP. 

## Life Expectancy

Analyzing a country's life expectancy is another way in which prosperity can begin to be quantified. Living longer allows for greater opportunity to experience all that life has to offer, and the country one lives in displays a remarkable difference in expected lifespan.

The world's average life expectancy in 1900 was just [32 years](https://ourworldindata.org/life-expectancy). As of 2024, that average sits at 73. This rapid increase in life expectancy is due to advances in medical care, public health, and living standards.

In a sense, life expectancy can serve as a potential proxy for a country's overall wellbeing. Medical advances, proper nutrition and diet, education, and economic development all have an observed impact on life expectancy. Further, countries with higher life expectancies can reasonably be inferred as safer from both crime and natural disaster.

This visualization seeks to compare life expectancy and GDP Per Capita as two metrics of overall wellbeing. A bar graph is displayed that ranks the countries left to right from highest to lowest in terms of GDP Per Capita. Each bar displays the country's average life expectancy for a given year (1990-2022). The dropdown allows users to toggle between years to show changes in both GDP Per Capita and life expectancy year over year. The tooltip shows the information about life expectancy, GDP Per Capita, and additional breakdown of male and female life expectancies for each year. The red line represents a moving average of the five previous countries' (from the left) life expectancies.

As can be seen from the plot, there seems to be a consistent correlation between GDP Per Capita and average life expectancy. Countries with the highest GDP Per Capita tend to have higher life expectancies, likely due to increased resources available to promote healthcare, nutrition, and safe lifestyle choices. European countries by and large rank highest in GDP Per Capita and have high life expectancies to back up this presumed relationship. While not a linear decrease, we can also clearly see that the moving average line of life expectancy decreases as GDP Per Capita decreases. In 2022 for example, the 5 countries with the highest GDP Per Capita have an average life expectancy of 82.42 years. The 5 countries with the lowest GDP Per Capita have an average life expectancy of 68.46 years. In this sense, life expectancy can serve as an effective metric for overall wellbeing of a country.

```{python echo=FALSE}
#| warning: false

import pandas as pd
import plotly.graph_objects as go

#Import datasets for merging
df1 = pd.read_csv("Data_cleaned/overall.csv")
df2 = pd.read_csv("Data_cleaned/male.csv")
df3 = pd.read_csv("Data_cleaned/female.csv")
df4 = pd.read_csv("Data_cleaned/gdppc.csv")

#Merge on Country and Year columns
df5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')
df5 = df5.drop_duplicates(['Country', 'Year'])
df5 = df5.rename(columns={'Overall': 'Life Expectancy'})
#Round GDP Per Capita
df5["GDP Per Capita (USD)"] = df5["GDP Per Capita (USD)"].round(2)
#Save merged data
df5.to_csv("Data_cleaned/lifeexpectancy.csv", index=False)
#Sort by GDP per capita highest to lowest
df5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)

# Filter out null values for GDP per capita
df5 = df5.dropna(subset=['GDP Per Capita (USD)'])

# Create a function that will allow me to change plot based on year
def update_plot(year):
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()

    fig = go.Figure()

    # Add barplot
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        name='Life Expectancy',
        marker=dict(color='#96ceb4'),
        #tooltip
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]
    ))

    # Add moving average line for life expectancy trend across gdp per capita
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name='Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']]
    ))

    # Layout settings
    fig.update_layout(
        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',
        xaxis_title='Country',
        yaxis_title='Life Expectancy',
        xaxis_tickangle=-45,
        yaxis=dict(range=[60, 90]),
        barmode='group',
        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
        hovermode='closest',
        plot_bgcolor='#faf0e6',
        width=1200,
        height=800
    )

    fig.show()


# All years to be displayed (1990-2022)
years = df5['Year'].unique().tolist()

# Create Plotly button
buttons = []
for year in years:
    button = dict(
        label=str(year),
        method="update",
        args=[{"visible": [year == y for y in years]}, {"title": f"Life Expectancy in {year} (Sorted by GDP Per Capita)"}],
    )
    buttons.append(button)

fig = go.Figure()

# Add barplot for each of the years
for year in years:
    year_df = df5[df5['Year'] == year]
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        marker = dict(color='#96ceb4'),
        name=str(year),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],
        visible=(year == years[0])  # Have it so most recent year (2022) is default
    ));

# Add moving average line for each year
for year in years:
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name=f'{year} Life Expectancy Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']],
        visible=(year == years[0])
    ));

# Find the minimum life expectancy across years
min_life_expectancy = df5['Life Expectancy'].min()

# Edit range of plot so bars fit nicely
y_axis_range = [min_life_expectancy - 3, 90]

# Update the layout
fig.update_layout(
    updatemenus=[
        dict(
            buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=1.05,  # Moves button to top right of plot
            xanchor="right",
            y=1.0,
            yanchor="top"
        ),
    ],
    xaxis_title='Country',
    yaxis_title='Life Expectancy',
    xaxis_tickangle=-45,
    yaxis=dict(range=y_axis_range), 
    barmode='group',
    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
    bargap=0.15,
    width=800,
    height= 520,
    bargroupgap=0.1,
    hovermode='closest',
    plot_bgcolor='#faf0e6',
    font_family = 'PT Sans Narrow',
    title=f"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)"
);

fig.update_layout(font_color='black')

```


## Wealth

GDP is often used as a measurement not only of a country’s well being, but more specifically of its economic prosperity. While it is certainly a useful tool, GDP fails to take numerous other economic factors into consideration. GDP per capita is sometimes used as a method to adjust this metric, taking into account the overall population of a country. However, it fails to integrate the actual wealth distribution within a country. GDP per capita can be very skewed in a financially oligarchic society wherein an elite minority control the vast majority of wealth. As such, we sought to explore a more grassroots approach to quantifying the economic wellbeing of a country. We hypothesized that using a ground up method rather than a top down, or even mean wise approach would lead to significantly different results in terms of economic prosperity. We therefore elected to compare GDP with the percentage of the population with a net worth of less than 25% of that nation’s poverty line. Our goal was to investigate how a metric of extreme poverty would relate to the overall GDP of the country. 

```{python echo=FALSE}
#| warning: false

import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import font_manager

# Load data
gdp = pd.read_csv('Data_cleaned/gdp.csv')
gdp = gdp.drop(columns=['Unnamed: 0'])
gdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)
gdp = gdp.drop(columns=['Country_Year'])

wealth = pd.read_csv('Data_Uncleaned/wealth.csv')
wealth = wealth.drop(columns=['POPULATION', 'Population', 'Flag Codes', 'Flags'])

# Extract poverty data
poverty = wealth[wealth['VAR'] == 'T6AC6'].reset_index()
poverty = poverty.drop(columns=['index', 'VAR', 'Variable', 'TIME'])
poverty.rename(columns={'Value': 'Share of Individuals with net Wealth less than 25% of the poverty line', 'Time': 'Year'}, inplace=True)

# Convert data types
poverty['Year'] = poverty['Year'].astype(int)
gdp['Year'] = gdp['Year'].astype(int)

# Merge datasets
merged = pd.merge(poverty, gdp, on=['Country', 'Year'], how='inner')
merged = merged.sort_values(by='Year', ascending=True)

# Convert GDP to numeric and clean formatting
merged['gdp'] = merged['gdp'].str.replace(',', '')
merged['gdp'] = pd.to_numeric(merged['gdp'])

# Filter data for visualization
vis = merged[merged['Year'] == 2014]
vis.to_csv('Data_cleaned/wealth_dist.csv')

# Load the font
font_path = "/Users/kendallgilbert/DSAN5200-Project/5200 Project/PT_Sans_Narrow/PTSansNarrow-Regular.ttf"  # Update with the path to your font file
font_prop = font_manager.FontProperties(fname=font_path)

# Plot
plt.figure(figsize=(10, 6))
ax1 = sns.barplot(data=vis, x="Country", y="Share of Individuals with net Wealth less than 25% of the poverty line", color='#ffcc5c')

ax2 = ax1.twinx()
ax2.plot(vis['Country'], vis['gdp'], color='#ff6f69', marker='o', linestyle='-')  

# Setting font properties
for ax in [ax1, ax2]:
    ax.set_xlabel('Country', fontproperties=font_prop)
    ax.set_ylabel('Share of Individuals with net Wealth < 25% of Poverty Line', fontproperties=font_prop)
    ax.set_facecolor('#faf0e6')
    ax.set_xticklabels(vis['Country'], rotation=45, ha='right', fontproperties=font_prop)
ax2.set_ylabel('GDP (Billion USD)', color='#ff6f69', fontproperties=font_prop)

plt.title('Share of Individuals with net Wealth less than 25% of the poverty line and GDP by Country in 2014', fontproperties=font_prop)
plt.tight_layout()
plt.show()
```

In this figure, our chosen metric for extreme poverty is on the y axis with GDP on the x axis. This sample is from 2014, and encompasses countries that reported the former. The goal of this figure is to illustrate how different these metrics can be, with high extreme poverty in countries with high GDP and low extreme poverty in countries with relatively smaller GDP. The data shown in this graph would suggest that GDP is not a good overall indicator of economic prosperity, as wealth distribution is radically different in countries with very similar GDPs. Exploration of a more in-depth quantification of a country’s well being in terms of financial success is therefore imperative. 

## Innovative Chart


In this figure we sought to explore a potentially more holistic model for a country’s overall prosperity. Each metric was individually explored in relation to gdp. These quantifiers represent a category encompassing a balanced variety of other metrics within that field. Here, they are simply our chosen indicators for the purposes of creating a mock up. Each field is normalized on a 0-1 with the highest measurement in each category being 1. We hope to show the viewer a more holistic analysis of a country’s overall wellbeing. In the future, we could experiment with higher dimensionality as well as using area to create an empirical score for each country. Additionally, this measurement would be year to year. This instance is for 2014, as it was the year with the most available data for our wealth distribution index. The wealth distribution index is one minus the normalized proportion of the population with net wealth of less than twenty five percent of the poverty line. 

```{python echo=FALSE}
#| warning: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
from sklearn.preprocessing import MinMaxScaler

csfont = {'fontname':'Pt Sans Narrow'}
hfont = {'fontname':'Pt Sans Narrow'}

wealth = pd.read_csv('Data_cleaned/wealth_dist.csv')
wealth = wealth.drop(columns = ['Unnamed: 0'])

life = pd.read_csv('Data_cleaned/lifeexpectancy.csv')
life = life[life['Year']==2014].reset_index()
life = life.drop(columns=['index', 'Female', 'Male', "GDP Per Capita (USD)"])

healthcare = pd.read_csv('Data_cleaned/hospital_beds.csv')
healthcare = healthcare[healthcare['Year'] == 2014].reset_index()
healthcare = healthcare.drop(columns=['Unnamed: 0', 'index'])

education = pd.read_csv('Data_cleaned/education.csv')
education = education.drop(index=0)

education.columns = ['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level']

education = education.reset_index(drop=True)
countries_to_keep = ['Latvia', 'France', 'Greece', 'Luxembourg', 'Italy', 'Hungary', 'Australia', 'Poland', 'Spain', 'Germany', 'Slovak Republic', 'Slovenia', 'Belgium', 'Austria', 'Japan', 'New Zealand']

education = education[education['Country'].isin(countries_to_keep)].reset_index()
education = education.drop(columns=['index', 'Master’s or equivalent level'])


population_data = {
    'Country': ['Latvia', 'France', 'Greece', 'Luxembourg', 'Italy', 'Hungary', 'Australia', 'Poland', 'Spain', 'Germany', 'Slovak Republic', 'Slovenia', 'Belgium', 'Austria', 'Japan', 'New Zealand'],
    'Population': [2000000, 66000000, 10800000, 550000, 60700000, 9900000, 23700000, 38400000, 46700000, 80700000, 5400000, 2060000, 11300000, 8540000, 127000000, 4500000]
}


df_population = pd.DataFrame(population_data)

education = pd.merge(education, df_population, on='Country')
education['Bachelor’s Degrees Per Capita'] = education['Bachelor’s or equivalent level'].astype(int) / education['Population'].astype(int)
education = education.drop(columns=['Bachelor’s or equivalent level', 'Population'])

merged = pd.merge(wealth, life, on='Country', how='inner')
merged = pd.merge(merged, healthcare, on = 'Country', how = 'inner')
merged = pd.merge(merged, education, on = 'Country', how='inner')
merged['Hospital Beds per 1,000 People'] = merged['beds']
merged = merged.drop(columns=['COUNTRY','Year_x', 'Year_y', 'beds', 'Year'])


columns_to_normalize = merged.columns[1:]


scaler = MinMaxScaler()

merged_normalized = merged.copy()
merged_normalized[columns_to_normalize] = scaler.fit_transform(merged_normalized[columns_to_normalize])

merged_normalized['Wealth Distribution'] = 1-(merged_normalized['Share of Individuals with net Wealth less than 25% of the poverty line'])
merged_normalized = merged_normalized.drop(columns=['Share of Individuals with net Wealth less than 25% of the poverty line'])

BG = "#D3D3D3"
BLUE = "#2a475e"
GREY70 = "#b3b3b3"
GREY_LIGHT = "#f2efe8"
COLORS = [
    "#FF5A5F", "#FF6E64", "#FF8270", "#FF956F",
    "#FFAA7E", "#FFC08D", "#FFD49B", "#FFE8AA",
    "#FFB400", "#FFC600", "#FFD800", "#FFE900",
    "#FFF100", "#FFFB00", "#007A87", "#008AB0"
]

COUNTRY = merged_normalized["Country"].values.tolist()


VARIABLES = merged_normalized.columns.tolist()[1:]
VARIABLES_N = len(VARIABLES)

ANGLES = [n / VARIABLES_N * 2 * np.pi for n in range(VARIABLES_N)]
ANGLES += ANGLES[:1]

X_VERTICAL_TICK_PADDING = 5
X_HORIZONTAL_TICK_PADDING = 50    

HANGLES = np.linspace(0, 2 * np.pi)


H0 = np.zeros(len(HANGLES))
H1 = np.ones(len(HANGLES)) * 0.5
H2 = np.ones(len(HANGLES))

fig = plt.figure(figsize=(18, 10))
ax = fig.add_subplot(111, polar=True)

fig.patch.set_facecolor(BG)
ax.set_facecolor(BG)

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)

#ax.set_ylim(-0.1, 1.05)

for idx, country in enumerate(COUNTRY):
    values = merged_normalized.iloc[idx].drop("Country").values.tolist()
    values += values[:1]
    ax.plot(ANGLES, values, c=COLORS[idx], linewidth=4, label=country)
    ax.scatter(ANGLES, values, s=160, c=COLORS[idx], zorder=10)
ax.set_xticks(ANGLES[:-1])
ax.set_xticklabels(VARIABLES, size=14, **csfont)


#ax.set_yticks([])
ax.yaxis.grid(False)
ax.xaxis.grid(False)


ax.spines["start"].set_color("none")
ax.spines["polar"].set_color("none")

ax.plot(HANGLES, H0, ls=(0, (6, 6)), c=GREY70)
ax.plot(HANGLES, H1, ls=(0, (6, 6)), c=COLORS[2])
ax.plot(HANGLES, H2, ls=(0, (6, 6)), c=GREY70)


ax.fill(HANGLES, H2, GREY_LIGHT)

ax.plot([0, 0], [0, 1], lw=2, c=GREY70)
ax.plot([np.pi, np.pi], [0, 1], lw=2, c=GREY70)
ax.plot([np.pi / 2, np.pi / 2], [0, 1], lw=2, c=GREY70)
ax.plot([-np.pi / 2, -np.pi / 2], [0, 1], lw=2, c=GREY70)

PAD = 0.05
ax.text(-0.4, 0 + PAD, "0%", size=16)
ax.text(-0.4, 0.5 + PAD, "50%", size=16)
ax.text(-0.4, 1 + PAD, "100%", size=16)

import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

# Your existing code for creating legend handles
handles = [
    Line2D([], [], c=color, lw=3, marker="o", markersize=8, label=country)
    for country, color in zip(COUNTRY, COLORS)
]

# Creating legend with custom handles
legend = ax.legend(
    handles=handles,
    loc=(-.3, 0),
    labelspacing=1.3,
    frameon=False
)

# Setting font size for legend text
for text in legend.get_texts():
    text.set_fontsize(10)

# Adjusting x-axis tick padding
XTICKS = ax.xaxis.get_major_ticks()
for tick in XTICKS[0::2]:
    tick.set_pad(X_VERTICAL_TICK_PADDING)

for tick in XTICKS[1::2]:
    tick.set_pad(X_HORIZONTAL_TICK_PADDING)

# Setting up figure title
fig.suptitle(
    "Model Holistic Review of Country Wellbeing",
    x=0.17,
    y=1,
    ha="left",
    fontsize=32,
    weight="bold"
)

# Setting background color to beige
fig.patch.set_facecolor('#f7ebdb')

fig
```


## Conclusion
