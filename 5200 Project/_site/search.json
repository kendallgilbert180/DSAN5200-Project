[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Quantifying International Prosperity",
    "section": "",
    "text": "How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie’s prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country’s wellbeing, ultimately suggesting that steps be taken to make this process more holistic\nThis analysis will dive deeper into factors regarding healthcare, social spending on family benefits, wealth distribution and population trends (life expectancy, birth rates) in an attempt to quantify a country’s wellbeing.\na great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn’t Add Up. The New Press."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Gathering / Information",
    "section": "",
    "text": "The data that we have chosen to use for this project comes from the OECD. OECD stands for Organization for Economic Co-operation and Development. This organization was founded in 1961, has 38 member countries and was created in attempt to stimulate economic progress and world trade.\nThe datasets that we will be working with include:\nGDP Data\n\nDate Range: 2000 - 2023\nUnit: GDP, Current PPPs, billions US dollars\nSource\n\nPopulation Data\n\nDate Range: 2000 - 2014\naddSource\n\nNet National Income\n\nDate Range: 2003 - 2022\nUnit:\naddSource\n\nInfant Mortality\n\nDate Range: 1990 - 2019\nUnit: Deaths per 1000 births\nSource\n\nFertility\n\nDate Range: 1990 - 2023\nUnit: Children\nSource\n\nImmigrant Inflow\n\nDate Range: 2000 - 2022\nUnit: Inflow of foreign population by nationality\nSource\n\nPaid Maternal Leave\n\nDate Range: 1990 - 2022\nUnit: Weeks\nSource\n\nWorking Population\n\nDate Range: 2011 - 2023\nUnit: persons in thousands\nSource\n\nLife Expectancy\n\nDate Range: 2010 - 2023\nUnit: Years\nSource"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5200 Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\n#Writing to a csv\nfertility.to_csv('Data_cleaned/fertility.csv')\nfertility\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3871854153.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp.to_csv('Data_cleaned/gdp.csv')\n\ngdp\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/342258130.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration.to_csv('Data_cleaned/immigration.csv')\n\nimmigration\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1953399705.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m.to_csv('Data_cleaned/i_m.csv')\n\ni_m\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/2840789272.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni.to_csv('Data_cleaned/nni.csv')\n\nnni\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1868564537.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop.to_csv('Data_cleaned/pop.csv')\n\npop\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/251758898.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working.to_csv('Data_cleaned/pop_working.csv')\n\npop_working\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3675620941.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e.to_csv('Data_cleaned/l_e.csv')\n\nl_e\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1175965265.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns"
  },
  {
    "objectID": "cleaning.html#cleaning-and-tidying-datasets",
    "href": "cleaning.html#cleaning-and-tidying-datasets",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\n#Writing to a csv\nfertility.to_csv('Data_cleaned/fertility.csv')\nfertility\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3871854153.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp.to_csv('Data_cleaned/gdp.csv')\n\ngdp\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/342258130.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration.to_csv('Data_cleaned/immigration.csv')\n\nimmigration\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1953399705.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m.to_csv('Data_cleaned/i_m.csv')\n\ni_m\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/2840789272.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni.to_csv('Data_cleaned/nni.csv')\n\nnni\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1868564537.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop.to_csv('Data_cleaned/pop.csv')\n\npop\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/251758898.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working.to_csv('Data_cleaned/pop_working.csv')\n\npop_working\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3675620941.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e.to_csv('Data_cleaned/l_e.csv')\n\nl_e\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1175965265.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns"
  },
  {
    "objectID": "birthrate.html",
    "href": "birthrate.html",
    "title": "birthrate",
    "section": "",
    "text": "library(reticulate)\nreticulate::use_condaenv(\"base\", required = TRUE)\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"Data_cleaned/fertility.csv\")\ndf = df.drop(columns = 'Unnamed: 0')\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf.head()\n\n  fertility_rate    Country  Year\n0            1.9  Australia  1990\n1           1.46    Austria  1990\n2           1.62    Belgium  1990\n3           1.71     Canada  1990\n4           2.58      Chile  1990\n\n\n\ndf['fertility_rate'] = pd.to_numeric(df['fertility_rate'], errors='coerce')\ndf = df.dropna()\n\npivot_df = df.pivot_table(index='Year', columns='Country', values='fertility_rate')\npivot_df = pivot_df.reset_index()\n\n\npivot_df.head()\n\nCountry  Year  Argentina  Australia  ...  Türkiye  United Kingdom  United States\n0        1990       3.00       1.90  ...     3.07            1.83           2.08\n1        1991       2.97       1.85  ...     3.00            1.82           2.06\n2        1992       2.93       1.89  ...     2.93            1.79           2.05\n3        1993       2.88       1.86  ...     2.87            1.76           2.02\n4        1994       2.83       1.84  ...     2.81            1.74           2.00\n\n[5 rows x 51 columns]\n\n\n\nnan_per_row = pivot_df.isna().sum(axis=1)\nnan_per_column = pivot_df.isna().sum()\nfor country, nan_count in nan_per_column.items(): \n    if nan_count &gt; 0: \n        print(f\"NaN count for {country}: {nan_count}\")\n\nNaN count for Argentina: 1\nNaN count for Australia: 1\nNaN count for Austria: 1\nNaN count for Belgium: 1\nNaN count for Brazil: 1\nNaN count for Bulgaria: 1\nNaN count for Canada: 1\nNaN count for Chile: 1\nNaN count for China: 1\nNaN count for Colombia: 1\nNaN count for Costa Rica: 1\nNaN count for Croatia: 1\nNaN count for Cyprus: 1\nNaN count for Czechia: 1\nNaN count for Estonia: 1\nNaN count for Finland: 1\nNaN count for France: 1\nNaN count for Germany: 1\nNaN count for Greece: 1\nNaN count for Iceland: 1\nNaN count for India: 1\nNaN count for Indonesia: 1\nNaN count for Ireland: 1\nNaN count for Israel: 1\nNaN count for Italy: 1\nNaN count for Japan: 1\nNaN count for Korea: 1\nNaN count for Latvia: 1\nNaN count for Lithuania: 1\nNaN count for Luxembourg: 1\nNaN count for Malta: 1\nNaN count for Mexico: 1\nNaN count for Netherlands: 1\nNaN count for New Zealand: 1\nNaN count for Poland: 1\nNaN count for Portugal: 1\nNaN count for Romania: 1\nNaN count for Russia: 1\nNaN count for Slovak Republic: 1\nNaN count for Slovenia: 1\nNaN count for South Africa: 1\nNaN count for Spain: 1\nNaN count for Sweden: 1\nNaN count for Switzerland: 1\nNaN count for Türkiye: 1\nNaN count for United Kingdom: 1\nNaN count for United States: 1\n\n\n\nother_df = df.pivot(index='Country', columns='Year', values='fertility_rate')\nother_df = other_df.reset_index()\n\nmelted_df = other_df.melt(id_vars='Country', var_name='Year', value_name='Fertility Rate')\n\nprint(melted_df.head())\n\n     Country  Year  Fertility Rate\n0  Argentina  1990            3.00\n1  Australia  1990            1.90\n2    Austria  1990            1.46\n3    Belgium  1990            1.62\n4     Brazil  1990            2.91\n\n\n\n#Mapping\ncountry_to_continent = {\n    'Argentina': 'South America',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Belgium': 'Europe',\n    'Brazil': 'South America',\n    'Bulgaria': 'Europe',\n    'Canada': 'North America',\n    'Chile': 'South America',\n    'China': 'Asia',\n    'Colombia': 'South America',\n    'Costa Rica': 'North America',\n    'Croatia': 'Europe',\n    'Cyprus': 'Europe',\n    'Czechia': 'Europe',\n    'Denmark': 'Europe',\n    'Estonia': 'Europe',\n    'Finland': 'Europe',\n    'France': 'Europe',\n    'Germany': 'Europe',\n    'Greece': 'Europe',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'India': 'Asia',\n    'Indonesia': 'Asia',\n    'Ireland': 'Europe',\n    'Israel': 'Asia',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Korea': 'Asia',\n    'Latvia': 'Europe',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Malta': 'Europe',\n    'Mexico': 'North America',\n    'Netherlands': 'Europe',\n    'New Zealand': 'Oceania',\n    'Norway': 'Europe',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Romania': 'Europe',\n    'Russia': 'Europe',\n    'Slovak Republic': 'Europe',\n    'Slovenia': 'Europe',\n    'South Africa': 'Africa',\n    'Spain': 'Europe',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Türkiye': 'Asia',\n    'United Kingdom': 'Europe',\n    'United States': 'North America'\n}\n\n\nimport plotly.graph_objects as go\nimport pandas as pd\n\nmelted_df['Continent'] = melted_df['Country'].map(country_to_continent)\nmelted_df['Year'] = pd.to_datetime(melted_df['Year'])\n\nfig = go.Figure()\nfor country in melted_df['Country'].unique():\n    df_country = melted_df[melted_df['Country'] == country]\n    fig.add_trace(\n        go.Scatter(x=df_country['Year'],\n                   y=df_country['Fertility Rate'],\n                   name=country));\n\n# List of Buttons\ndropdown_options = [\n    {'label': 'All Continents',\n     'method': 'update',\n     'args': [{'visible': [True] * len(melted_df)},\n              {'title': 'Fertility Rate Over Time in All Continents'}]}\n]\nfor continent in melted_df['Continent'].unique():\n    dropdown_options.append(\n        {'label': continent,\n         'method': 'update',\n         'args': [{'visible': melted_df['Continent'] == continent},\n                  {'title': 'Fertility Rate Over Time in ' + continent}]})\n\nfig.update_layout(updatemenus=[\n    dict(buttons=dropdown_options,\n         direction=\"down\",\n         pad={\"r\": 10, \"t\": 10},\n         showactive=True,\n         x=0.99, \n         xanchor=\"right\",\n         y=1.15,\n         yanchor=\"top\")]);\n\n#Replacement line\nfig.add_shape(type=\"line\",\n              x0=min(melted_df['Year']),\n              y0=2,\n              x1=max(melted_df['Year']),\n              y1=2,\n              line=dict(color=\"black\", width=3, dash=\"dash\"),\n              opacity=0.5);\n\n\nfig.add_annotation(text=\"Replacement\",\n                   xref=\"paper\", yref=\"y\",\n                   x=-0.1, y=1.95,\n                   showarrow=False,\n                   font=dict(color=\"black\"));\n\nfig.update_layout(title_text=\"Fertility Rate by Country Over Time\", xaxis_title = \"Year\", yaxis_title = \"Average Number of Children per Woman\", yaxis_title_standoff=60);\n\nfig.show()"
  },
  {
    "objectID": "Population.html",
    "href": "Population.html",
    "title": "Population",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly as py\nfrom chart_studio import plotly\nimport plotly.express as px\n\n\ndf = pd.read_csv('Data_cleaned/pop.csv')\ndf.head()\n\n\n\n\n\n\n\n\nUnnamed: 0\npopulation\nCountry_Year\n\n\n\n\n0\n0\n19029000\nAustralia_2000\n\n\n1\n1\n8011566\nAustria_2000\n\n\n2\n2\n10251250\nBelgium_2000\n\n\n3\n3\n30685730\nCanada_2000\n\n\n4\n4\n15397780\nChile_2000\n\n\n\n\n\n\n\n\ndf = df.drop(columns=['Unnamed: 0'])\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n\n\n\n\n\n\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\n\n\n\n\n0\n19029000\nAustralia\n2000\n\n\n1\n8011566\nAustria\n2000\n\n\n2\n10251250\nBelgium\n2000\n\n\n3\n30685730\nCanada\n2000\n\n\n4\n15397780\nChile\n2000\n\n\n\n\n\n\n\n\nprint(df['Country'].unique())\n\n['Australia' 'Austria' 'Belgium' 'Canada' 'Chile' 'Colombia' 'Czechia'\n 'Denmark' 'Estonia' 'Finland' 'France' 'Germany' 'Greece' 'Hungary'\n 'Iceland' 'Ireland' 'Israel' 'Italy' 'Japan' 'Korea' 'Luxembourg'\n 'Mexico' 'Netherlands' 'New Zealand' 'Norway' 'Poland' 'Portugal'\n 'Slovak Republic' 'Slovenia' 'Spain' 'Sweden' 'Switzerland' 'Türkiye'\n 'United Kingdom' 'United States' 'World' 'Brazil' 'China' 'India'\n 'Indonesia' 'Russia' 'South Africa']\n\n\n\n\niso_mapping = {\n    'Australia': 'AUS',\n    'Austria': 'AUT',\n    'Belgium': 'BEL',\n    'Canada': 'CAN',\n    'Chile': 'CHL',\n    'Colombia': 'COL',\n    'Czechia': 'CZE',\n    'Denmark': 'DNK',\n    'Estonia': 'EST',\n    'Finland': 'FIN',\n    'France': 'FRA',\n    'Germany': 'DEU',\n    'Greece': 'GRC',\n    'Hungary': 'HUN',\n    'Iceland': 'ISL',\n    'Ireland': 'IRL',\n    'Israel': 'ISR',\n    'Italy': 'ITA',\n    'Japan': 'JPN',\n    'Korea': 'KOR',\n    'Luxembourg': 'LUX',\n    'Mexico': 'MEX',\n    'Netherlands': 'NLD',\n    'New Zealand': 'NZL',\n    'Norway': 'NOR',\n    'Poland': 'POL',\n    'Portugal': 'PRT',\n    'Slovak Republic': 'SVK',\n    'Slovenia': 'SVN',\n    'Spain': 'ESP',\n    'Sweden': 'SWE',\n    'Switzerland': 'CHE',\n    'Türkiye': 'TUR',\n    'United Kingdom': 'GBR',\n    'United States': 'USA',\n    'World': 'WLD',  \n    'Brazil': 'BRA',\n    'China': 'CHN',\n    'India': 'IND',\n    'Indonesia': 'IDN',\n    'Russia': 'RUS',\n    'South Africa': 'ZAF'\n}\n\n\ndf['CODE'] = df['Country'].map(iso_mapping)\n\n\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\nCODE\n\n\n\n\n0\n19029000\nAustralia\n2000\nAUS\n\n\n1\n8011566\nAustria\n2000\nAUT\n\n\n2\n10251250\nBelgium\n2000\nBEL\n\n\n3\n30685730\nCanada\n2000\nCAN\n\n\n4\n15397780\nChile\n2000\nCHL\n\n\n\n\n\n\n\n\ndf['Year'] = df['Year'].astype(int)\ndf = df[df['Year'] != 2000]\ndf = df[df['Year'] != 2014]\n\ndf.tail()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\nCODE\n\n\n\n\n583\n1385567000\nChina\n2013\nCHN\n\n\n584\n1252140000\nIndia\n2013\nIND\n\n\n585\n249865600\nIndonesia\n2013\nIDN\n\n\n586\n143507000\nRussia\n2013\nRUS\n\n\n587\n..\nSouth Africa\n2013\nZAF\n\n\n\n\n\n\n\n\n\n\nframes = []\nsliders = []\n\n# Generating frames\nfor year, group in df.groupby('Year'):\n    frame = go.Frame(\n        data=[go.Choropleth(\n            locations=group['CODE'],\n            z=group['population'],\n            text=group['Country'],\n            #colorscale='Reds',\n            autocolorscale=True,\n            colorbar_title='Population',\n        )],\n        name=str(year)\n    )\n    frames.append(frame)\n\n    slider_step = {\"args\": [\n        [year],\n        {\"frame\": {\"duration\": 300, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 300}}\n    ],\n        \"label\": year,\n        \"method\": \"animate\"}\n    sliders.append(slider_step)\n\n# making the figure\nfig = go.Figure(\n    data=[go.Choropleth(\n        locations=df['CODE'],\n        z=df['population'],\n        text=df['Country'],\n        #colorscale='Reds',\n        autocolorscale=True,\n        colorbar_title='Population',\n    )],\n    frames=frames\n)\n\n# adding features like title, slider, buttons\nfig.update_layout(\n    title={\n        'text': \"Population by Country\",\n        'x':0.5,  \n        'y':0.95  \n    },\n    title_font=dict(size=30,\n                    color='black',\n                    family='Times New Roman'),\n    autosize=False,\n    width=1000,\n    height=500,\n    margin=dict(\n        l=10,\n        r=10,\n        b=70,\n        t=70,\n        pad=4,),\n    paper_bgcolor=\"grey\",\n    sliders=[{\n        \"active\": 0,\n        \"currentvalue\": {\"prefix\": \"Year: \"},\n        \"steps\": sliders,\n        \"pad\": {\"t\": 50}\n    }],\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    updatemenus=[\n        {\n            \"buttons\": [\n                {\n                    \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": True}, \"fromcurrent\": True}],\n                    \"label\": \"Play\",\n                    \"method\": \"animate\",\n                },\n                {\n                    \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 0}}],\n                    \"label\": \"Pause\",\n                    \"method\": \"animate\",\n                }\n            ],\n            \"direction\": \"left\",\n            \"pad\": {\"r\": 10, \"t\": 87},\n            \"showactive\": True,\n            \"type\": \"buttons\",\n            \"x\": 0.1,\n            \"xanchor\": \"right\",\n            \"y\": 0.4,\n            \"yanchor\": \"top\"\n        }\n    ]\n)\n\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nneed to fix tooltip and the colors/data are not distinct enough"
  },
  {
    "objectID": "Immigration.html",
    "href": "Immigration.html",
    "title": "Immigration",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndf = pd.read_csv('Data_cleaned/immigration.csv')\ndf = df.drop(columns='Unnamed: 0')\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n\n\n\n\n\n\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf = df.drop(df.index[0])\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\ndf.shape\n\n(850, 3)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\n\ndf['immigration_rate'] = pd.to_numeric(df['immigration_rate'], errors='coerce')\ndf = df.dropna()\n\npivot_df = df.pivot_table(index='Year', columns='Country', values='immigration_rate')\npivot_df = pivot_df.drop(columns=['Year'])\npivot_df = pivot_df.reset_index()\n\n\npivot_df.head()\n\n\n\n\n\n\n\nCountry\nYear\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\n...\nPoland\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nTürkiye\nUnited Kingdom\nUnited States\n\n\n\n\n0\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n...\n15897.0\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\nNaN\n260424.0\n841002.0\n\n\n1\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n...\n21466.0\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\nNaN\n262239.0\n1058902.0\n\n\n2\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n...\n30243.0\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\nNaN\n288770.0\n1059356.0\n\n\n3\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n...\n30325.0\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\nNaN\n327405.0\n703542.0\n\n\n4\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n...\n36851.0\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\nNaN\n434322.0\n957883.0\n\n\n\n\n5 rows × 36 columns\n\n\n\n\nnan_per_row = pivot_df.isna().sum(axis=1)\nnan_per_column = pivot_df.isna().sum()\nfor country, nan_count in nan_per_column.items(): \n    if nan_count &gt; 0: \n        print(f\"NaN count for {country}: {nan_count}\")\n\nNaN count for Australia: 1\nNaN count for Austria: 1\nNaN count for Belgium: 1\nNaN count for Canada: 1\nNaN count for Czechia: 1\nNaN count for Denmark: 1\nNaN count for Estonia: 5\nNaN count for Finland: 1\nNaN count for France: 1\nNaN count for Germany: 1\nNaN count for Greece: 6\nNaN count for Iceland: 1\nNaN count for Ireland: 1\nNaN count for Israel: 1\nNaN count for Italy: 1\nNaN count for Japan: 1\nNaN count for Korea: 1\nNaN count for Latvia: 4\nNaN count for Luxembourg: 1\nNaN count for Netherlands: 1\nNaN count for Norway: 1\nNaN count for Poland: 1\nNaN count for Portugal: 1\nNaN count for Slovenia: 8\nNaN count for Spain: 1\nNaN count for Sweden: 1\nNaN count for Switzerland: 1\nNaN count for Türkiye: 16\nNaN count for United Kingdom: 3\nNaN count for United States: 1\n\n\n\npivot_df=pivot_df.drop(columns=['Türkiye'])\n\n\npivot_df.head()\n\n\n\n\n\n\n\nCountry\nYear\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\n...\nNorway\nPoland\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nUnited Kingdom\nUnited States\n\n\n\n\n0\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n...\n27785.0\n15897.0\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\n260424.0\n841002.0\n\n\n1\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n...\n25412.0\n21466.0\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\n262239.0\n1058902.0\n\n\n2\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n...\n30788.0\n30243.0\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\n288770.0\n1059356.0\n\n\n3\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n...\n26787.0\n30325.0\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\n327405.0\n703542.0\n\n\n4\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n...\n27864.0\n36851.0\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\n434322.0\n957883.0\n\n\n\n\n5 rows × 35 columns\n\n\n\n\nother_df = df.pivot(index = 'Country', columns = 'Year', values= 'immigration_rate')\nother_df = other_df.reset_index()\nother_df = other_df.drop(columns=['2022'])\n\nother_df.head()\n\n\n\n\n\n\n\nYear\nCountry\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n...\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\nAustralia\n107148.0\n127877.0\n119080.0\n123411.0\n146441.0\n161734.0\n176205.0\n189490.0\n203874.0\n...\n235993.0\n244849.0\n233908.0\n223654.0\n218488.0\n224220.0\n186640.0\n155817.0\n137465.0\n153826.0\n\n\n1\nAustria\n65954.0\n74786.0\n86144.0\n93341.0\n104246.0\n97995.0\n82899.0\n91546.0\n94368.0\n...\n125605.0\n135228.0\n154260.0\n198658.0\n158746.0\n139329.0\n131724.0\n134966.0\n121311.0\n139543.0\n\n\n2\nBelgium\n57295.0\n65974.0\n70230.0\n68800.0\n72446.0\n77411.0\n83433.0\n93387.0\n106012.0\n...\n116055.0\n105529.0\n106345.0\n128762.0\n106087.0\n109167.0\n119663.0\n129450.0\n101553.0\n122386.0\n\n\n3\nCanada\n227455.0\n250640.0\n228919.0\n221349.0\n235822.0\n262244.0\n251641.0\n236751.0\n247242.0\n...\n257763.0\n259034.0\n260283.0\n271808.0\n296740.0\n286447.0\n321042.0\n341175.0\n184585.0\n405795.0\n\n\n4\nChile\n18741.0\n28924.0\n29942.0\n29835.0\n32099.0\n40793.0\n37035.0\n53071.0\n43577.0\n...\n65247.0\n84352.0\n83549.0\n101911.0\n135490.0\n207200.0\n339350.0\n254080.0\n154551.0\n76545.0\n\n\n\n\n5 rows × 23 columns\n\n\n\n\nother_df.set_index('Country', inplace=True)\n\ndf_transposed = other_df.transpose()\ndf_transposed.head()\n\n\n\n\n\n\n\nCountry\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\nFrance\n...\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nTürkiye\nUnited Kingdom\nUnited States\nYear\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n91875.0\n...\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\nNaN\n260424.0\n841002.0\nNaN\n\n\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n106877.0\n...\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\nNaN\n262239.0\n1058902.0\n2001.0\n\n\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n124232.0\n...\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\nNaN\n288770.0\n1059356.0\n2002.0\n\n\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n136370.0\n...\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\nNaN\n327405.0\n703542.0\n2003.0\n\n\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n141554.0\n...\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\nNaN\n434322.0\n957883.0\n2004.0\n\n\n\n\n5 rows × 36 columns\n\n\n\n\n\n\n# Plot the stacked area chart\nplt.figure(figsize=(10, 6))\ndf_transposed.plot(kind='area', stacked=True)\nplt.title('Stacked Area Chart of Immigration by Country')\nplt.xlabel('Year')\nplt.ylabel('Immigration')\nplt.legend(title='Country', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n\n&lt;Figure size 1000x600 with 0 Axes&gt;"
  },
  {
    "objectID": "lifeexpectancy.html",
    "href": "lifeexpectancy.html",
    "title": "lifeexp",
    "section": "",
    "text": "library(reticulate)\nreticulate::use_condaenv(\"base\", required = TRUE)\n\n\nimport pandas as pd\nimport plotly.graph_objects as go\n\n#Import datasets for merging\ndf1 = pd.read_csv(\"Data_cleaned/overall.csv\")\ndf2 = pd.read_csv(\"Data_cleaned/male.csv\")\ndf3 = pd.read_csv(\"Data_cleaned/female.csv\")\ndf4 = pd.read_csv(\"Data_cleaned/gdppc.csv\")\n\n#Merge on Country and Year columns\ndf5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')\ndf5 = df5.drop_duplicates(['Country', 'Year'])\ndf5 = df5.rename(columns={'Overall': 'Life Expectancy'})\n#Round GDP Per Capita\ndf5[\"GDP Per Capita (USD)\"] = df5[\"GDP Per Capita (USD)\"].round(2)\n#Save merged data\ndf5.to_csv(\"Data_cleaned/lifeexpectancy.csv\", index=False)\n#Sort by GDP per capita highest to lowest\ndf5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)\n\n# Filter out null values for GDP per capita\ndf5 = df5.dropna(subset=['GDP Per Capita (USD)'])\n\n# Create a function that will allow me to change plot based on year\ndef update_plot(year):\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n\n    fig = go.Figure()\n\n    # Add barplot\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        name='Life Expectancy',\n        marker=dict(color='#96ceb4'),\n        #tooltip\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]\n    ))\n\n    # Add moving average line for life expectancy trend across gdp per capita\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name='Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']]\n    ))\n\n    # Layout settings\n    fig.update_layout(\n        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',\n        xaxis_title='Country',\n        yaxis_title='Life Expectancy',\n        xaxis_tickangle=-45,\n        yaxis=dict(range=[60, 90]),\n        barmode='group',\n        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n        hovermode='closest',\n        plot_bgcolor='#faf0e6',\n        width=1200,\n        height=800\n    )\n\n    fig.show()\n\n\n# All years to be displayed (1990-2022)\nyears = df5['Year'].unique().tolist()\n\n# Create Plotly button\nbuttons = []\nfor year in years:\n    button = dict(\n        label=str(year),\n        method=\"update\",\n        args=[{\"visible\": [year == y for y in years]}, {\"title\": f\"Life Expectancy in {year} (Sorted by GDP Per Capita)\"}],\n    )\n    buttons.append(button)\n\nfig = go.Figure()\n\n# Add barplot for each of the years\nfor year in years:\n    year_df = df5[df5['Year'] == year]\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        marker = dict(color='#96ceb4'),\n        name=str(year),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])  # Have it so most recent year (2022) is default\n    ));\n\n# Add moving average line for each year\nfor year in years:\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name=f'{year} Life Expectancy Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])\n    ));\n\n# Find the minimum life expectancy across years\nmin_life_expectancy = df5['Life Expectancy'].min()\n\n# Edit range of plot so bars fit nicely\ny_axis_range = [min_life_expectancy - 3, 90]\n\n# Update the layout\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=1.05,  # Moves button to top right of plot\n            xanchor=\"right\",\n            y=1.0,\n            yanchor=\"top\"\n        ),\n    ],\n    xaxis_title='Country',\n    yaxis_title='Life Expectancy',\n    xaxis_tickangle=-45,\n    yaxis=dict(range=y_axis_range), \n    barmode='group',\n    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n    bargap=0.15,\n    width=800,\n    height= 520,\n    bargroupgap=0.1,\n    hovermode='closest',\n    plot_bgcolor='#faf0e6',\n    font_family = 'PT Sans Narrow',\n    title=f\"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)\"\n);\n\nfig.show()"
  },
  {
    "objectID": "healthcare.html",
    "href": "healthcare.html",
    "title": "Healthcare Indicators",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nLoading required package: Ecfun\n\n\nAttaching package: 'Ecfun'\n\n\nThe following object is masked from 'package:base':\n\n    sign\n\n\n\nAttaching package: 'Ecdat'\n\n\nThe following object is masked from 'package:datasets':\n\n    Orange\n\n\n\n\nWarning: NAs introduced by coercion\n\n\n\nHealthcare Indicators: Number of Hospital Beds, Length of Hospital Stays, and GDP\n\n\n\n\n\n\n\n\nWarning: NAs introduced by coercion\n\n\n\n\nWarning: Ignoring 279 observations\n\n\nWarning: Ignoring 209 observations\n\n\nSetting the `off` event (i.e., 'plotly_doubleclick') to match the `on` event (i.e., 'plotly_click'). You can change this default via the `highlight()` function.\n\n\nWarning: The titlefont attribute is deprecated. Use title = list(font = ...)\ninstead.\n\n\n\n\n\n\n\n\nWarning: Ignoring 17 observations\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nWarning: Can only have one: highlight"
  },
  {
    "objectID": "about.html#introduction",
    "href": "about.html#introduction",
    "title": "Quantifying International Prosperity",
    "section": "",
    "text": "How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie’s prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country’s wellbeing, ultimately suggesting that steps be taken to make this process more holistic\nThis analysis will dive deeper into factors regarding healthcare, social spending on family benefits, wealth distribution and population trends (life expectancy, birth rates) in an attempt to quantify a country’s wellbeing.\na great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn’t Add Up. The New Press."
  },
  {
    "objectID": "about.html#gdp",
    "href": "about.html#gdp",
    "title": "Quantifying International Prosperity",
    "section": "GDP",
    "text": "GDP"
  },
  {
    "objectID": "about.html#healthcare",
    "href": "about.html#healthcare",
    "title": "Quantifying International Prosperity",
    "section": "Healthcare",
    "text": "Healthcare"
  },
  {
    "objectID": "about.html#social-spending",
    "href": "about.html#social-spending",
    "title": "Quantifying International Prosperity",
    "section": "Social Spending",
    "text": "Social Spending\nAnother important factor that can determine the well-being of a country is social spending in regards to family benefits. OECD countries spend on average 2.29% of GDP on family benefits, with large variations across countries. These variations are evident as illustrated in the bubble chart below.\nThis spending is beneficial for numerous reasons. First, family benefits help families meet their basic needs. These benefits provide financial assistance that can help with the costs of having a family. By helping families meet their basic needs, social spending on family benefits can improve over wellbeing. Furthermore, spending money on family benefits can directly impact child well-being, healthier work-life balance for parents and economic growth. By supporting families and enabling parents to remain in or return to the workforce, these policies contribute to overall economic stability and prosperity.\nBased on the chart below you can see countries like Iceland, Estonia and Luxembourg dedicate a large percentage of their GDP towards family benefits. Countries like this are notorious for prioritizing well-being and it is proven to be working.\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n\n# Read / Cleaning the data\nsocial_spending = pd.read_csv(\"Data_cleaned/social_spending.csv\", header=1)\ngdp = pd.read_csv(\"Data_cleaned/gdp.csv\")\ngdp['gdp'] = gdp['gdp'].replace('..', np.nan)\ngdp['gdp'] = gdp['gdp'].str.replace(',', '')\ngdp['gdp'] = gdp['gdp'].astype(float)\nsocial_spending = social_spending.rename(columns={'Year': 'Country'})\nsocial_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nsocial_spending = pd.melt(social_spending, id_vars=['Country'], var_name='Year', value_name='s_s')\nsocial_spending['Country_Year'] = social_spending['Country'] + '_' + social_spending['Year'].astype(str)\n\nmerged_data = pd.merge(gdp, social_spending, on=['Country_Year'])\nmerged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')\nmerged_data['s_s'] = pd.to_numeric(merged_data['s_s'], errors='coerce')\n#merged_data['gdp'] = merged_data['gdp'].fillna(merged_data['gdp'].mean())\n#merged_data['s_s'] = merged_data['s_s'].fillna(merged_data['s_s'].mean())\n\n\naverage_social_spending = merged_data.groupby('Country')['s_s'].mean().reset_index()\naverage_gdp = merged_data.groupby('Country')['gdp'].mean().reset_index()\naverage_data = pd.merge(average_social_spending, average_gdp, on='Country', suffixes=('_s_s', '_gdp'))\naverage_data['s_s_gdp_ratio'] = average_data['s_s'] / average_data['gdp']\n\ncolor_map = {\n    'Australia': 'rgb(255, 0, 0)',        # Red\n    'Austria': 'rgb(0, 255, 0)',          # Green\n    'Belgium': 'rgb(0, 0, 255)',          # Blue\n    'Canada': 'rgb(255, 255, 0)',         # Yellow\n    'Chile': 'rgb(255, 0, 255)',          # Magenta\n    'Colombia': 'rgb(0, 255, 255)',       # Cyan\n    'Costa Rica': 'rgb(255, 127, 0)',     # Orange\n    'Czechia': 'rgb(255, 0, 127)',        # Reddish-Pink\n    'Denmark': 'rgb(0, 127, 255)',        # Bluish\n    'Estonia': 'rgb(127, 255, 0)',        # Greenish-Yellow\n    'Finland': 'rgb(0, 255, 127)',        # Greenish\n    'France': 'rgb(127, 0, 255)',         # Purplish-Blue\n    'Germany': 'rgb(255, 255, 127)',      # Light Yellow\n    'Greece': 'rgb(127, 255, 255)',       # Light Cyan\n    'Hungary': 'rgb(255, 127, 255)',      # Light Magenta\n    'Iceland': 'rgb(255, 0, 0)',          # Red\n    'Ireland': 'rgb(0, 255, 0)',          # Green\n    'Israel': 'rgb(0, 0, 255)',           # Blue\n    'Italy': 'rgb(255, 255, 0)',          # Yellow\n    'Japan': 'rgb(255, 0, 255)',          # Magenta\n    'Korea': 'rgb(0, 255, 255)',          # Cyan\n    'Latvia': 'rgb(255, 127, 0)',         # Orange\n    'Lithuania': 'rgb(255, 0, 127)',      # Reddish-Pink\n    'Luxembourg': 'rgb(0, 127, 255)',     # Bluish\n    'Mexico': 'rgb(127, 255, 0)',         # Greenish-Yellow\n    'Netherlands': 'rgb(0, 255, 127)',    # Greenish\n    'New Zealand': 'rgb(127, 0, 255)',    # Purplish-Blue\n    'Norway': 'rgb(255, 255, 127)',      # Light Yellow\n    'Poland': 'rgb(127, 255, 255)',       # Light Cyan\n    'Portugal': 'rgb(255, 127, 255)',     # Light Magenta\n    'Slovak Republic': 'rgb(255, 0, 0)',  # Red\n    'Slovenia': 'rgb(0, 255, 0)',         # Green\n    'Spain': 'rgb(0, 0, 255)',            # Blue\n    'Sweden': 'rgb(255, 255, 0)',         # Yellow\n    'Switzerland': 'rgb(255, 0, 255)',    # Magenta\n    'Türkiye': 'rgb(0, 255, 255)',        # Cyan\n    'United Kingdom': 'rgb(255, 127, 0)', # Orange\n    'United States': 'rgb(255, 0, 127)',  # Reddish-Pink\n}\n\naverage_data['color'] = average_data['Country'].map(color_map)\nbubble_sizes = average_data['s_s_gdp_ratio'] * 1000\n\nfig = go.Figure(data=go.Scatter(\n    x=average_data['s_s_gdp_ratio'],\n    y=average_data['gdp'],\n    mode='markers',\n    marker=dict(\n        size=bubble_sizes,\n        sizemode='area',\n        sizeref=2.*max(bubble_sizes)/(100**2),\n        sizemin=4,\n        color=average_data['color']\n    ),\ntext = average_data.apply(lambda row: f\"Country: {row['Country']}&lt;br&gt;Avg Social Spending: {row['s_s']:.4f}&lt;br&gt;Avg GDP: {row['gdp']:.4f}&lt;br&gt;Ratio: {row['s_s_gdp_ratio']:.4f}\", axis=1)\n))\n\nfig.update_layout(\n    title='Percentage of GDP Spent on Family Benefits',\n    xaxis=dict(title='Average Percentage of GDP spent on Family Benefits'),  \n    yaxis=dict(title='Average GDP (Billions) Over 20 Years'),\n    showlegend=False\n)\n\nfig.update_layout(plot_bgcolor='#faf0e6', font_color='black')\n\nfig.update_layout(\n    xaxis=dict(\n        title='Average Percentage of GDP spent on Family Benefits',\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    ),\n    yaxis=dict(\n        title='Average GDP Over 20 Years (Billions)',\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    ),\n    showlegend=False,\n    plot_bgcolor='#faf0e6',\n    font_color='black'\n)\n\nfig.update_layout(title_font_family='PT Sans Narrow')\n\n\n\n                                                \n\n\nThere is a drastic difference between countries like Iceland and the United States. Add table here \n** Add takeaways"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Quantifying International Prosperity",
    "section": "Education",
    "text": "Education\nEducation plays a large role in the overall well-being of a Country. Specifically, the quantity of people with the education uquivalent of a Bachelors and Masters can help improve a country in regard to economic development, workforce skills and global competitiveness. Within the chart below, the OECD countries have been separated by their specific regions. The bar chart illustrates the total number of people with Bachelor Degrees and Masters Degrees by Region.\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Read / Cleaning the data\neducation = pd.read_csv(\"Data_cleaned/education.csv\", header=1)\neducation\n\neducation = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\ngdp = pd.read_csv(\"Data_cleaned/gdp.csv\")\ngdp['gdp'] = gdp['gdp'].replace('..', np.nan)\ngdp['gdp'] = gdp['gdp'].str.replace(',', '')\ngdp['gdp'] = gdp['gdp'].astype(float)\ngdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)\ngdp_2001 = gdp[gdp['Year'] == '2021']\n\neducation_gdp = pd.merge(gdp_2001, education, on=['Country'])\n\n\n\neducation_gdp = education_gdp[['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level', 'gdp']]\neducation_gdp\n\ncountry_to_region = {\n    'USA': 'North America',\n    'Canada': 'North America',\n    'Germany': 'Europe',\n    'France': 'Europe',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Belgium': 'Europe',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Costa Rica': 'North America',\n    'Czechia': 'Europe',\n    'Denmark': 'Europe',\n    'Estonia': 'Europe',\n    'Finland': 'Europe',\n    'Greece': 'Europe',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'Ireland': 'Europe',\n    'Israel': 'Middle East',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Korea': 'Asia',\n    'Latvia': 'Europe',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Mexico': 'North America',\n    'Netherlands': 'Europe',\n    'New Zealand': 'Oceania',\n    'Norway': 'Europe',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Slovak Republic': 'Europe',\n    'Slovenia': 'Europe',\n    'Spain': 'Europe',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Turkey': 'Europe',\n    'United Kingdom': 'Europe',\n    'United States': 'North America',\n    'Türkiye': 'Middle East'\n    \n}\n\n\neducation_gdp['Region'] = education_gdp['Country'].map(country_to_region)\nunique_regions = education_gdp['Region'].unique()\n\nimport pandas as pd\nimport plotly.express as px\naverage_gdp_by_region = education_gdp.groupby('Region')['gdp'].mean().reset_index()\nsum_by_region = education_gdp.groupby('Region')[['Bachelor’s or equivalent level', 'Master’s or equivalent level']].sum()\nsum_by_region\ntest  = pd.merge(average_gdp_by_region,sum_by_region, on='Region' )\n\nimport pandas as pd\nimport plotly.express as px\n\nmelted_test = test.melt(id_vars=['Region', 'gdp'], value_vars=['Bachelor’s or equivalent level', 'Master’s or equivalent level'],\n                        var_name='Education Level', value_name='Total Count')\n\nfig = px.bar(melted_test, x='Region', y='Total Count', color='Education Level',\n             title='OECD Total Bachelor\\'s and Master\\'s Degrees by Region (2021)',\n             hover_data={'Region': True, 'Total Count': True, 'gdp': True},\n             labels={'Total Count': 'Total Count (Millions)', 'Education Level': 'Education Level'},\n             barmode='group',\n             base='gdp',\n             color_discrete_map={'Bachelor’s or equivalent level': '#84cf63', \n                                 'Master’s or equivalent level': '#3d682b'}\n                                 )\n\nfig.update_traces(customdata=melted_test[['Education Level', 'gdp']], \n                  width=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n                  hovertemplate='&lt;br&gt;'.join([\n                      'Region: %{x}',\n                      'Education Level: %{customdata[0]}',\n                      'Total Count: %{y:,.0f}',\n                      'Average GDP: $%{customdata[1]:,.2f} (Billions)'\n                  ]))\n\nfig.update_layout(plot_bgcolor='#faf0e6', font_color='black')\n\nfig.add_annotation(\n    x=\"North America\",\n    y=3023000,\n    text=\"Highest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\n\nfig.add_annotation(\n    x=\"South America\",\n    y=392195,\n    text=\"Lowest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\nfig.update_layout(title_font_family='PT Sans Narrow')\n\nfig.update_layout(\n    xaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    ),\n    yaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    )\n)\n\nfig.update_layout(\n    legend=dict(\n        font=dict(family='PT Sans Narrow')\n    )\n)\n\n\nfig.show()"
  },
  {
    "objectID": "about.html#life-expectancy",
    "href": "about.html#life-expectancy",
    "title": "Quantifying International Prosperity",
    "section": "Life Expectancy",
    "text": "Life Expectancy\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\n\n#Import datasets for merging\ndf1 = pd.read_csv(\"Data_cleaned/overall.csv\")\ndf2 = pd.read_csv(\"Data_cleaned/male.csv\")\ndf3 = pd.read_csv(\"Data_cleaned/female.csv\")\ndf4 = pd.read_csv(\"Data_cleaned/gdppc.csv\")\n\n#Merge on Country and Year columns\ndf5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')\ndf5 = df5.drop_duplicates(['Country', 'Year'])\ndf5 = df5.rename(columns={'Overall': 'Life Expectancy'})\n#Round GDP Per Capita\ndf5[\"GDP Per Capita (USD)\"] = df5[\"GDP Per Capita (USD)\"].round(2)\n#Save merged data\ndf5.to_csv(\"Data_cleaned/lifeexpectancy.csv\", index=False)\n#Sort by GDP per capita highest to lowest\ndf5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)\n\n# Filter out null values for GDP per capita\ndf5 = df5.dropna(subset=['GDP Per Capita (USD)'])\n\n# Create a function that will allow me to change plot based on year\ndef update_plot(year):\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n\n    fig = go.Figure()\n\n    # Add barplot\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        name='Life Expectancy',\n        marker=dict(color='#96ceb4'),\n        #tooltip\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]\n    ))\n\n    # Add moving average line for life expectancy trend across gdp per capita\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name='Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']]\n    ))\n\n    # Layout settings\n    fig.update_layout(\n        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',\n        xaxis_title='Country',\n        yaxis_title='Life Expectancy',\n        xaxis_tickangle=-45,\n        yaxis=dict(range=[60, 90]),\n        barmode='group',\n        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n        hovermode='closest',\n        plot_bgcolor='#faf0e6',\n        width=1200,\n        height=800\n    )\n\n    fig.show()\n\n\n# All years to be displayed (1990-2022)\nyears = df5['Year'].unique().tolist()\n\n# Create Plotly button\nbuttons = []\nfor year in years:\n    button = dict(\n        label=str(year),\n        method=\"update\",\n        args=[{\"visible\": [year == y for y in years]}, {\"title\": f\"Life Expectancy in {year} (Sorted by GDP Per Capita)\"}],\n    )\n    buttons.append(button)\n\nfig = go.Figure()\n\n# Add barplot for each of the years\nfor year in years:\n    year_df = df5[df5['Year'] == year]\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        marker = dict(color='#96ceb4'),\n        name=str(year),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])  # Have it so most recent year (2022) is default\n    ));\n\n# Add moving average line for each year\nfor year in years:\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name=f'{year} Life Expectancy Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])\n    ));\n\n# Find the minimum life expectancy across years\nmin_life_expectancy = df5['Life Expectancy'].min()\n\n# Edit range of plot so bars fit nicely\ny_axis_range = [min_life_expectancy - 3, 90]\n\n# Update the layout\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=1.05,  # Moves button to top right of plot\n            xanchor=\"right\",\n            y=1.0,\n            yanchor=\"top\"\n        ),\n    ],\n    xaxis_title='Country',\n    yaxis_title='Life Expectancy',\n    xaxis_tickangle=-45,\n    yaxis=dict(range=y_axis_range), \n    barmode='group',\n    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n    bargap=0.15,\n    width=800,\n    height= 520,\n    bargroupgap=0.1,\n    hovermode='closest',\n    plot_bgcolor='#faf0e6',\n    font_family = 'PT Sans Narrow',\n    title=f\"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)\"\n);\n\nfig.update_layout(font_color='black')\n\nfig.show()"
  },
  {
    "objectID": "about.html#population",
    "href": "about.html#population",
    "title": "Quantifying International Prosperity",
    "section": "Population",
    "text": "Population"
  },
  {
    "objectID": "about.html#wealth",
    "href": "about.html#wealth",
    "title": "Quantifying International Prosperity",
    "section": "Wealth",
    "text": "Wealth"
  },
  {
    "objectID": "about.html#innovative-chart",
    "href": "about.html#innovative-chart",
    "title": "Quantifying International Prosperity",
    "section": "Innovative Chart",
    "text": "Innovative Chart"
  },
  {
    "objectID": "about.html#conclusion",
    "href": "about.html#conclusion",
    "title": "Quantifying International Prosperity",
    "section": "Conclusion",
    "text": "Conclusion"
  },
  {
    "objectID": "life_expectancy_test.html",
    "href": "life_expectancy_test.html",
    "title": "5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport plotly.graph_objects as go\n\n#Import datasets for merging\ndf1 = pd.read_csv(\"Data_cleaned/overall.csv\")\ndf2 = pd.read_csv(\"Data_cleaned/male.csv\")\ndf3 = pd.read_csv(\"Data_cleaned/female.csv\")\ndf4 = pd.read_csv(\"Data_cleaned/gdppc.csv\")\n\n#Merge on Country and Year columns\ndf5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')\ndf5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')\ndf5 = df5.drop_duplicates(['Country', 'Year'])\ndf5 = df5.rename(columns={'Overall': 'Life Expectancy'})\n#Round GDP Per Capita\ndf5[\"GDP Per Capita (USD)\"] = df5[\"GDP Per Capita (USD)\"].round(2)\n#Save merged data\ndf5.to_csv(\"Data_cleaned/lifeexpectancy.csv\", index=False)\n#Sort by GDP per capita highest to lowest\ndf5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)\n\n# Filter out null values for GDP per capita\ndf5 = df5.dropna(subset=['GDP Per Capita (USD)'])\n\n# Create a function that will allow me to change plot based on year\ndef update_plot(year):\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n\n    fig = go.Figure()\n\n    # Add barplot\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        name='Life Expectancy',\n        marker=dict(color='#96ceb4'),\n        #tooltip\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]\n    ))\n\n    # Add moving average line for life expectancy trend across gdp per capita\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name='Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']]\n    ))\n\n    # Layout settings\n    fig.update_layout(\n        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',\n        xaxis_title='Country',\n        yaxis_title='Life Expectancy',\n        xaxis_tickangle=-45,\n        yaxis=dict(range=[60, 90]),\n        barmode='group',\n        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n        hovermode='closest',\n        plot_bgcolor='#faf0e6',\n        width=1200,\n        height=800\n    )\n\n    fig.show()\n\n\n# All years to be displayed (1990-2022)\nyears = df5['Year'].unique().tolist()\n\n# Create Plotly button\nbuttons = []\nfor year in years:\n    button = dict(\n        label=str(year),\n        method=\"update\",\n        args=[{\"visible\": [year == y for y in years]}, {\"title\": f\"Life Expectancy in {year} (Sorted by GDP Per Capita)\"}],\n    )\n    buttons.append(button)\n\nfig = go.Figure()\n\n# Add barplot for each of the years\nfor year in years:\n    year_df = df5[df5['Year'] == year]\n    fig.add_trace(go.Bar(\n        x=year_df['Country'],\n        y=year_df['Life Expectancy'],\n        marker = dict(color='#96ceb4'),\n        name=str(year),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;Life Expectancy:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;Male Life Expectancy:&lt;/b&gt; %{customdata[1]}&lt;br&gt;' +\n                      '&lt;b&gt;Female Life Expectancy:&lt;/b&gt; %{customdata[2]}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[3]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])  # Have it so most recent year (2022) is default\n    ));\n\n# Add moving average line for each year\nfor year in years:\n    year_df = df5[df5['Year'] == year].copy()\n    window_size = 5\n    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()\n    fig.add_trace(go.Scatter(\n        x=year_df['Country'],\n        y=year_df['Moving Average'],\n        mode='lines',\n        name=f'{year} Life Expectancy Moving Average',\n        line=dict(color='red', width=2),\n        hovertemplate='&lt;b&gt;Country:&lt;/b&gt; %{x}&lt;br&gt;' +\n                      '&lt;b&gt;Year:&lt;/b&gt; %{customdata[0]}&lt;br&gt;' +\n                      '&lt;b&gt;5 Country Moving Average LE:&lt;/b&gt; %{y}&lt;br&gt;' +\n                      '&lt;b&gt;GDP Per Capita (USD):&lt;/b&gt; $%{customdata[1]:,.2f}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=year_df[['Year', 'GDP Per Capita (USD)']],\n        visible=(year == years[0])\n    ));\n\n# Find the minimum life expectancy across years\nmin_life_expectancy = df5['Life Expectancy'].min()\n\n# Edit range of plot so bars fit nicely\ny_axis_range = [min_life_expectancy - 3, 90]\n\n# Update the layout\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=buttons,\n            direction=\"down\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=1.05,  # Moves button to top right of plot\n            xanchor=\"right\",\n            y=1.0,\n            yanchor=\"top\"\n        ),\n    ],\n    xaxis_title='Country',\n    yaxis_title='Life Expectancy',\n    xaxis_tickangle=-45,\n    yaxis=dict(range=y_axis_range), \n    barmode='group',\n    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),\n    bargap=0.15,\n    width=800,\n    height= 520,\n    bargroupgap=0.1,\n    hovermode='closest',\n    plot_bgcolor='#faf0e6',\n    font_family = 'PT Sans Narrow',\n    title=f\"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)\"\n);\n\nfig.update_layout(font_color='black')\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "education.html",
    "href": "education.html",
    "title": "5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Read / Cleaning the data\neducation = pd.read_csv(\"Data_cleaned/education.csv\", header=1)\neducation\n\neducation = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\ngdp = pd.read_csv(\"Data_cleaned/gdp.csv\")\ngdp['gdp'] = gdp['gdp'].replace('..', np.nan)\ngdp['gdp'] = gdp['gdp'].str.replace(',', '')\ngdp['gdp'] = gdp['gdp'].astype(float)\ngdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)\ngdp_2001 = gdp[gdp['Year'] == '2021']\n\neducation_gdp = pd.merge(gdp_2001, education, on=['Country'])\n\n\n\neducation_gdp = education_gdp[['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level', 'gdp']]\neducation_gdp\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_91582/3171546669.py:9: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  education = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nBachelor’s or equivalent level\nMaster’s or equivalent level\ngdp\n\n\n\n\n0\nAustralia\n252506\n122642\n1646.96\n\n\n1\nAustria\n33770\n27988\n567.99\n\n\n2\nBelgium\n69889\n44605\n719.59\n\n\n3\nCanada\n219192\n71091\n2133.08\n\n\n4\nChile\n131092\n52980\n568.19\n\n\n5\nColombia\n260366\n112291\n906.03\n\n\n6\nCosta Rica\n41199\n4837\n122.15\n\n\n7\nCzechia\n36622\n28201\n508.67\n\n\n8\nDenmark\n46184\n25480\n409.26\n\n\n9\nEstonia\n5520\n3873\n59.43\n\n\n10\nFinland\n37917\n20341\n320.21\n\n\n11\nFrance\n305232\n339359\n3648.08\n\n\n12\nGermany\n388732\n223691\n5153.14\n\n\n13\nGreece\n56857\n22950\n348.98\n\n\n14\nHungary\n45024\n21565\n375.23\n\n\n15\nIceland\n3303\n1776\n22.90\n\n\n16\nIreland\n48954\n30420\n574.39\n\n\n17\nIsrael\n56215\n26289\n433.32\n\n\n18\nItaly\n254776\n189598\n2950.84\n\n\n19\nJapan\n579213\n104165\n5599.03\n\n\n20\nKorea\n355340\n78808\n2514.52\n\n\n21\nLatvia\n7150\n4345\n69.31\n\n\n22\nLithuania\n16254\n6987\n129.99\n\n\n23\nLuxembourg\n643\n992\n88.30\n\n\n24\nMexico\n689242\n136975\n2677.52\n\n\n25\nNetherlands\n114065\n56213\n1186.87\n\n\n26\nNew Zealand\n42890\n8048\n246.33\n\n\n27\nNorway\n35461\n18533\n482.47\n\n\n28\nPoland\n268005\n132134\n1527.35\n\n\n29\nPortugal\n55566\n28112\n401.86\n\n\n30\nSlovak Republic\n18358\n18954\n205.88\n\n\n31\nSlovenia\n8982\n5057\n98.03\n\n\n32\nSpain\n197334\n158469\n2068.30\n\n\n33\nSweden\n40302\n32423\n660.10\n\n\n34\nSwitzerland\n63945\n28344\n710.32\n\n\n35\nTürkiye\n553351\n92699\n2662.21\n\n\n36\nUnited Kingdom\n447788\n318351\n3541.78\n\n\n37\nUnited States\n2066445\n988535\n23594.03\n\n\n\n\n\n\n\n\nunique_countries = education_gdp['Country'].unique()\nunique_countries\n\narray(['Australia', 'Austria', 'Belgium', 'Canada', 'Chile', 'Colombia',\n       'Costa Rica', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France',\n       'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Israel',\n       'Italy', 'Japan', 'Korea', 'Latvia', 'Lithuania', 'Luxembourg',\n       'Mexico', 'Netherlands', 'New Zealand', 'Norway', 'Poland',\n       'Portugal', 'Slovak Republic', 'Slovenia', 'Spain', 'Sweden',\n       'Switzerland', 'Türkiye', 'United Kingdom', 'United States'],\n      dtype=object)\n\n\n\ncountry_to_region = {\n    'USA': 'North America',\n    'Canada': 'North America',\n    'Germany': 'Europe',\n    'France': 'Europe',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Belgium': 'Europe',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Costa Rica': 'North America',\n    'Czechia': 'Europe',\n    'Denmark': 'Europe',\n    'Estonia': 'Europe',\n    'Finland': 'Europe',\n    'Greece': 'Europe',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'Ireland': 'Europe',\n    'Israel': 'Middle East',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Korea': 'Asia',\n    'Latvia': 'Europe',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Mexico': 'North America',\n    'Netherlands': 'Europe',\n    'New Zealand': 'Oceania',\n    'Norway': 'Europe',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Slovak Republic': 'Europe',\n    'Slovenia': 'Europe',\n    'Spain': 'Europe',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Turkey': 'Europe',\n    'United Kingdom': 'Europe',\n    'United States': 'North America',\n    'Türkiye': 'Middle East'\n    \n}\n\n\neducation_gdp['Region'] = education_gdp['Country'].map(country_to_region)\nunique_regions = education_gdp['Region'].unique()\nprint(unique_regions)\n\n['Oceania' 'Europe' 'North America' 'South America' 'Middle East' 'Asia']\n\n\n\n#education_gdp['Region'] = education_gdp['Country'].map(country_to_region)\n#education_gdp.drop(columns=['Country'], inplace=True)\neducation_gdp\n\n\n\n\n\n\n\n\nCountry\nBachelor’s or equivalent level\nMaster’s or equivalent level\ngdp\nRegion\n\n\n\n\n0\nAustralia\n252506\n122642\n1646.96\nOceania\n\n\n1\nAustria\n33770\n27988\n567.99\nEurope\n\n\n2\nBelgium\n69889\n44605\n719.59\nEurope\n\n\n3\nCanada\n219192\n71091\n2133.08\nNorth America\n\n\n4\nChile\n131092\n52980\n568.19\nSouth America\n\n\n5\nColombia\n260366\n112291\n906.03\nSouth America\n\n\n6\nCosta Rica\n41199\n4837\n122.15\nNorth America\n\n\n7\nCzechia\n36622\n28201\n508.67\nEurope\n\n\n8\nDenmark\n46184\n25480\n409.26\nEurope\n\n\n9\nEstonia\n5520\n3873\n59.43\nEurope\n\n\n10\nFinland\n37917\n20341\n320.21\nEurope\n\n\n11\nFrance\n305232\n339359\n3648.08\nEurope\n\n\n12\nGermany\n388732\n223691\n5153.14\nEurope\n\n\n13\nGreece\n56857\n22950\n348.98\nEurope\n\n\n14\nHungary\n45024\n21565\n375.23\nEurope\n\n\n15\nIceland\n3303\n1776\n22.90\nEurope\n\n\n16\nIreland\n48954\n30420\n574.39\nEurope\n\n\n17\nIsrael\n56215\n26289\n433.32\nMiddle East\n\n\n18\nItaly\n254776\n189598\n2950.84\nEurope\n\n\n19\nJapan\n579213\n104165\n5599.03\nAsia\n\n\n20\nKorea\n355340\n78808\n2514.52\nAsia\n\n\n21\nLatvia\n7150\n4345\n69.31\nEurope\n\n\n22\nLithuania\n16254\n6987\n129.99\nEurope\n\n\n23\nLuxembourg\n643\n992\n88.30\nEurope\n\n\n24\nMexico\n689242\n136975\n2677.52\nNorth America\n\n\n25\nNetherlands\n114065\n56213\n1186.87\nEurope\n\n\n26\nNew Zealand\n42890\n8048\n246.33\nOceania\n\n\n27\nNorway\n35461\n18533\n482.47\nEurope\n\n\n28\nPoland\n268005\n132134\n1527.35\nEurope\n\n\n29\nPortugal\n55566\n28112\n401.86\nEurope\n\n\n30\nSlovak Republic\n18358\n18954\n205.88\nEurope\n\n\n31\nSlovenia\n8982\n5057\n98.03\nEurope\n\n\n32\nSpain\n197334\n158469\n2068.30\nEurope\n\n\n33\nSweden\n40302\n32423\n660.10\nEurope\n\n\n34\nSwitzerland\n63945\n28344\n710.32\nEurope\n\n\n35\nTürkiye\n553351\n92699\n2662.21\nMiddle East\n\n\n36\nUnited Kingdom\n447788\n318351\n3541.78\nEurope\n\n\n37\nUnited States\n2066445\n988535\n23594.03\nNorth America\n\n\n\n\n\n\n\n\n# plot a nested pie chart using plotly\nimport plotly.express as px\nfig = px.sunburst(education_gdp, path=['Region','Country'], values='gdp', names = 'Country', title='GDP',color_discrete_sequence=px.colors.qualitative.Set3, hover_data=['Master’s or equivalent level', 'Bachelor’s or equivalent level'])\n# change the plot size\nfig.update_layout(width=800, height=800)\nfig.update_layout(plot_bgcolor='#f7ebdb', font_color='black', \n                  font=dict(family=\"Montserrat, sans-serif\"))\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport pandas as pd\nimport plotly.express as px\naverage_gdp_by_region = education_gdp.groupby('Region')['gdp'].mean().reset_index()\nsum_by_region = education_gdp.groupby('Region')[['Bachelor’s or equivalent level', 'Master’s or equivalent level']].sum()\nsum_by_region\ntest  = pd.merge(average_gdp_by_region,sum_by_region, on='Region' )\n\n\nimport pandas as pd\nimport plotly.express as px\n\nmelted_test = test.melt(id_vars=['Region', 'gdp'], value_vars=['Bachelor’s or equivalent level', 'Master’s or equivalent level'],\n                        var_name='Education Level', value_name='Total Count')\n\nfig = px.bar(melted_test, x='Region', y='Total Count', color='Education Level',\n             title='OECD Total Bachelor\\'s and Master\\'s Degrees by Region (2021)',\n             hover_data={'Region': True, 'Total Count': True, 'gdp': True},\n             labels={'Total Count': 'Total Count (Millions)', 'Education Level': 'Education Level'},\n             barmode='group',\n             base='gdp',\n             color_discrete_map={'Bachelor’s or equivalent level': '#84cf63', \n                                 'Master’s or equivalent level': '#3d682b'}\n                                 )\n\nfig.update_traces(customdata=melted_test[['Education Level', 'gdp']], \n                  width=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n                  hovertemplate='&lt;br&gt;'.join([\n                      'Region: %{x}',\n                      'Education Level: %{customdata[0]}',\n                      'Total Count: %{y:,.0f}',\n                      'Average GDP: $%{customdata[1]:,.2f} (Billions)'\n                  ]))\n\nfig.update_layout(plot_bgcolor='#faf0e6', font_color='black')\n\nfig.add_annotation(\n    x=\"North America\",\n    y=3023000,\n    text=\"Highest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\n\nfig.add_annotation(\n    x=\"South America\",\n    y=392195,\n    text=\"Lowest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\nfig.update_layout(title_font_family='PT Sans Narrow')\n\nfig.update_layout(\n    xaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    ),\n    yaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    )\n)\n\nfig.update_layout(\n    legend=dict(\n        font=dict(family='PT Sans Narrow')\n    )\n)\n\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport pandas as pd\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Read / Cleaning the data\neducation = pd.read_csv(\"Data_cleaned/education.csv\", header=1)\neducation\n\neducation = education.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\ngdp = pd.read_csv(\"Data_cleaned/gdp.csv\")\ngdp['gdp'] = gdp['gdp'].replace('..', np.nan)\ngdp['gdp'] = gdp['gdp'].str.replace(',', '')\ngdp['gdp'] = gdp['gdp'].astype(float)\ngdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)\ngdp_2001 = gdp[gdp['Year'] == '2021']\n\neducation_gdp = pd.merge(gdp_2001, education, on=['Country'])\n\n\n\neducation_gdp = education_gdp[['Country', 'Bachelor’s or equivalent level', 'Master’s or equivalent level', 'gdp']]\neducation_gdp\n\ncountry_to_region = {\n    'USA': 'North America',\n    'Canada': 'North America',\n    'Germany': 'Europe',\n    'France': 'Europe',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Belgium': 'Europe',\n    'Chile': 'South America',\n    'Colombia': 'South America',\n    'Costa Rica': 'North America',\n    'Czechia': 'Europe',\n    'Denmark': 'Europe',\n    'Estonia': 'Europe',\n    'Finland': 'Europe',\n    'Greece': 'Europe',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'Ireland': 'Europe',\n    'Israel': 'Middle East',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Korea': 'Asia',\n    'Latvia': 'Europe',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Mexico': 'North America',\n    'Netherlands': 'Europe',\n    'New Zealand': 'Oceania',\n    'Norway': 'Europe',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Slovak Republic': 'Europe',\n    'Slovenia': 'Europe',\n    'Spain': 'Europe',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Turkey': 'Europe',\n    'United Kingdom': 'Europe',\n    'United States': 'North America',\n    'Türkiye': 'Middle East'\n    \n}\n\n\neducation_gdp['Region'] = education_gdp['Country'].map(country_to_region)\nunique_regions = education_gdp['Region'].unique()\n\nimport pandas as pd\nimport plotly.express as px\naverage_gdp_by_region = education_gdp.groupby('Region')['gdp'].mean().reset_index()\nsum_by_region = education_gdp.groupby('Region')[['Bachelor’s or equivalent level', 'Master’s or equivalent level']].sum()\nsum_by_region\ntest  = pd.merge(average_gdp_by_region,sum_by_region, on='Region' )\n\nimport pandas as pd\nimport plotly.express as px\n\nmelted_test = test.melt(id_vars=['Region', 'gdp'], value_vars=['Bachelor’s or equivalent level', 'Master’s or equivalent level'],\n                        var_name='Education Level', value_name='Total Count')\n\nfig = px.bar(melted_test, x='Region', y='Total Count', color='Education Level',\n             title='OECD Total Bachelor\\'s and Master\\'s Degrees by Region (2021)',\n             hover_data={'Region': True, 'Total Count': True, 'gdp': True},\n             labels={'Total Count': 'Total Count (Millions)', 'Education Level': 'Education Level'},\n             barmode='group',\n             base='gdp',\n             color_discrete_map={'Bachelor’s or equivalent level': '#84cf63', \n                                 'Master’s or equivalent level': '#3d682b'}\n                                 )\n\nfig.update_traces(customdata=melted_test[['Education Level', 'gdp']], \n                  width=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5],\n                  hovertemplate='&lt;br&gt;'.join([\n                      'Region: %{x}',\n                      'Education Level: %{customdata[0]}',\n                      'Total Count: %{y:,.0f}',\n                      'Average GDP: $%{customdata[1]:,.2f} (Billions)'\n                  ]))\n\nfig.update_layout(plot_bgcolor='#faf0e6', font_color='black')\n\nfig.add_annotation(\n    x=\"North America\",\n    y=3023000,\n    text=\"Highest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\n\nfig.add_annotation(\n    x=\"South America\",\n    y=392195,\n    text=\"Lowest Average GDP\",\n    xanchor=\"center\",\n    arrowhead=2\n)\n\nfig.update_layout(title_font_family='PT Sans Narrow')\n\nfig.update_layout(\n    xaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    ),\n    yaxis=dict(\n        title_font=dict(family='PT Sans Narrow'),\n        tickfont=dict(family='PT Sans Narrow')\n    )\n)\n\nfig.update_layout(\n    legend=dict(\n        font=dict(family='PT Sans Narrow')\n    )\n)\n\n\nfig.show()\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_91582/3100080380.py:9: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  }
]