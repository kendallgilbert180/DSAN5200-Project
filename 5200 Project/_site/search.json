[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Gathering / Information",
    "section": "",
    "text": "The data that we have chosen to use for this project comes from the OECD. OECD stands for Organization for Economic Co-operation and Development. This organization was founded in 1961, has 38 member countries and was created in attempt to stimulate economic progress and world trade.\nThe datasets that we will be working with include:\nGDP Data\n\nDate Range: 2000 - 2023\nUnit: GDP, Current PPPs, billions US dollars\nSource\n\nPopulation Data\n\nDate Range: 2000 - 2014\naddSource\n\nNet National Income\n\nDate Range: 2003 - 2022\nUnit:\naddSource\n\nInfant Mortality\n\nDate Range: 1990 - 2019\nUnit: Deaths per 1000 births\nSource\n\nFertility\n\nDate Range: 1990 - 2023\nUnit: Children\nSource\n\nImmigrant Inflow\n\nDate Range: 2000 - 2022\nUnit: Inflow of foreign population by nationality\nSource\n\nPaid Maternal Leave\n\nDate Range: 1990 - 2022\nUnit: Weeks\nSource\n\nWorking Population\n\nDate Range: 2011 - 2023\nUnit: persons in thousands\nSource"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5200 Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\nfertility\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/536427820.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/262549689.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/31041099.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/2863281320.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/3140687827.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/1063633312.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/707146143.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\nIf merged with inner you are only left with 112 values.. only merge values you are working with\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nmerged = pd.merge(fertility, gdp, on='Country_Year', how='inner')\nmerged = pd.merge(merged, immigration, on='Country_Year', how='inner')\nmerged[['Country', 'Year']] = merged['Country_Year'].str.split('_', expand=True)\nmerged = merged.drop('Country_Year', axis=1)\nmerged = merged.replace(['..', np.nan], 0)"
  },
  {
    "objectID": "cleaning.html#cleaning-and-tidying-datasets",
    "href": "cleaning.html#cleaning-and-tidying-datasets",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\nfertility\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/536427820.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/262549689.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/31041099.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/2863281320.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/3140687827.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/1063633312.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_73916/707146143.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\nIf merged with inner you are only left with 112 values.. only merge values you are working with\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nmerged = pd.merge(fertility, gdp, on='Country_Year', how='inner')\nmerged = pd.merge(merged, immigration, on='Country_Year', how='inner')\nmerged[['Country', 'Year']] = merged['Country_Year'].str.split('_', expand=True)\nmerged = merged.drop('Country_Year', axis=1)\nmerged = merged.replace(['..', np.nan], 0)"
  }
]