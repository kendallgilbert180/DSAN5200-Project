[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Quantifying International Prosperity",
    "section": "",
    "text": "How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie’s prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country’s wellbeing, ultimately suggesting that steps be taken to make this process more holistic\nThis analysis will dive deeper into factors regarding healthcare, social spending on family benefits, wealth distribution and population trends (life expectancy, birth rates) in an attempt to quantify a country’s wellbeing.\na great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn’t Add Up. The New Press."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Gathering / Information",
    "section": "",
    "text": "The data that we have chosen to use for this project comes from the OECD. OECD stands for Organization for Economic Co-operation and Development. This organization was founded in 1961, has 38 member countries and was created in attempt to stimulate economic progress and world trade.\nThe datasets that we will be working with include:\nGDP Data\n\nDate Range: 2000 - 2023\nUnit: GDP, Current PPPs, billions US dollars\nSource\n\nPopulation Data\n\nDate Range: 2000 - 2014\nSource\n\nNet National Income\n\nDate Range: 2003 - 2022\nUnit:\nSource\n\nInfant Mortality\n\nDate Range: 1990 - 2019\nUnit: Deaths per 1000 births\nSource\n\nFertility\n\nDate Range: 1990 - 2023\nUnit: Children\nSource\n\nImmigrant Inflow\n\nDate Range: 2000 - 2022\nUnit: Inflow of foreign population by nationality\nSource\n\nPaid Maternal Leave\n\nDate Range: 1990 - 2022\nUnit: Weeks\nSource\n\nWorking Population\n\nDate Range: 2011 - 2023\nUnit: persons in thousands\nSource\n\nLife Expectancy\n\nDate Range: 2010 - 2023\nUnit: Years\nSource\n\nSocial Spending\n\nDate Range: 2000 - 2022\nUnit: Percentage\nSource"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "5200 Project",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\n#Writing to a csv\nfertility.to_csv('Data_cleaned/fertility.csv')\nfertility\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3871854153.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp.to_csv('Data_cleaned/gdp.csv')\n\ngdp\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/342258130.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration.to_csv('Data_cleaned/immigration.csv')\n\nimmigration\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1953399705.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m.to_csv('Data_cleaned/i_m.csv')\n\ni_m\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/2840789272.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni.to_csv('Data_cleaned/nni.csv')\n\nnni\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1868564537.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop.to_csv('Data_cleaned/pop.csv')\n\npop\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/251758898.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working.to_csv('Data_cleaned/pop_working.csv')\n\npop_working\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3675620941.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e.to_csv('Data_cleaned/l_e.csv')\n\nl_e\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1175965265.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns"
  },
  {
    "objectID": "cleaning.html#cleaning-and-tidying-datasets",
    "href": "cleaning.html#cleaning-and-tidying-datasets",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\n#Writing to a csv\nfertility.to_csv('Data_cleaned/fertility.csv')\nfertility\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3871854153.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp.to_csv('Data_cleaned/gdp.csv')\n\ngdp\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/342258130.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration.to_csv('Data_cleaned/immigration.csv')\n\nimmigration\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1953399705.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m.to_csv('Data_cleaned/i_m.csv')\n\ni_m\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/2840789272.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni.to_csv('Data_cleaned/nni.csv')\n\nnni\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1868564537.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop.to_csv('Data_cleaned/pop.csv')\n\npop\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/251758898.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working.to_csv('Data_cleaned/pop_working.csv')\n\npop_working\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/3675620941.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e.to_csv('Data_cleaned/l_e.csv')\n\nl_e\n\n\n/var/folders/zl/mwx636ts1pbc006v4wqp6fwr0000gn/T/ipykernel_2530/1175965265.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns"
  },
  {
    "objectID": "birthrate.html",
    "href": "birthrate.html",
    "title": "birthrate",
    "section": "",
    "text": "library(reticulate)\nreticulate::use_condaenv(\"base\", required = TRUE)\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"Data_cleaned/fertility.csv\")\ndf = df.drop(columns = 'Unnamed: 0')\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf.head()\n\n  fertility_rate    Country  Year\n0            1.9  Australia  1990\n1           1.46    Austria  1990\n2           1.62    Belgium  1990\n3           1.71     Canada  1990\n4           2.58      Chile  1990\n\n\n\ndf['fertility_rate'] = pd.to_numeric(df['fertility_rate'], errors='coerce')\ndf = df.dropna()\n\npivot_df = df.pivot_table(index='Year', columns='Country', values='fertility_rate')\npivot_df = pivot_df.reset_index()\n\n\npivot_df.head()\n\nCountry  Year  Argentina  Australia  ...  Türkiye  United Kingdom  United States\n0        1990       3.00       1.90  ...     3.07            1.83           2.08\n1        1991       2.97       1.85  ...     3.00            1.82           2.06\n2        1992       2.93       1.89  ...     2.93            1.79           2.05\n3        1993       2.88       1.86  ...     2.87            1.76           2.02\n4        1994       2.83       1.84  ...     2.81            1.74           2.00\n\n[5 rows x 51 columns]\n\n\n\nnan_per_row = pivot_df.isna().sum(axis=1)\nnan_per_column = pivot_df.isna().sum()\nfor country, nan_count in nan_per_column.items(): \n    if nan_count &gt; 0: \n        print(f\"NaN count for {country}: {nan_count}\")\n\nNaN count for Argentina: 1\nNaN count for Australia: 1\nNaN count for Austria: 1\nNaN count for Belgium: 1\nNaN count for Brazil: 1\nNaN count for Bulgaria: 1\nNaN count for Canada: 1\nNaN count for Chile: 1\nNaN count for China: 1\nNaN count for Colombia: 1\nNaN count for Costa Rica: 1\nNaN count for Croatia: 1\nNaN count for Cyprus: 1\nNaN count for Czechia: 1\nNaN count for Estonia: 1\nNaN count for Finland: 1\nNaN count for France: 1\nNaN count for Germany: 1\nNaN count for Greece: 1\nNaN count for Iceland: 1\nNaN count for India: 1\nNaN count for Indonesia: 1\nNaN count for Ireland: 1\nNaN count for Israel: 1\nNaN count for Italy: 1\nNaN count for Japan: 1\nNaN count for Korea: 1\nNaN count for Latvia: 1\nNaN count for Lithuania: 1\nNaN count for Luxembourg: 1\nNaN count for Malta: 1\nNaN count for Mexico: 1\nNaN count for Netherlands: 1\nNaN count for New Zealand: 1\nNaN count for Poland: 1\nNaN count for Portugal: 1\nNaN count for Romania: 1\nNaN count for Russia: 1\nNaN count for Slovak Republic: 1\nNaN count for Slovenia: 1\nNaN count for South Africa: 1\nNaN count for Spain: 1\nNaN count for Sweden: 1\nNaN count for Switzerland: 1\nNaN count for Türkiye: 1\nNaN count for United Kingdom: 1\nNaN count for United States: 1\n\n\n\nother_df = df.pivot(index='Country', columns='Year', values='fertility_rate')\nother_df = other_df.reset_index()\n\nmelted_df = other_df.melt(id_vars='Country', var_name='Year', value_name='Fertility Rate')\n\nprint(melted_df.head())\n\n     Country  Year  Fertility Rate\n0  Argentina  1990            3.00\n1  Australia  1990            1.90\n2    Austria  1990            1.46\n3    Belgium  1990            1.62\n4     Brazil  1990            2.91\n\n\n\n#Mapping\ncountry_to_continent = {\n    'Argentina': 'South America',\n    'Australia': 'Oceania',\n    'Austria': 'Europe',\n    'Belgium': 'Europe',\n    'Brazil': 'South America',\n    'Bulgaria': 'Europe',\n    'Canada': 'North America',\n    'Chile': 'South America',\n    'China': 'Asia',\n    'Colombia': 'South America',\n    'Costa Rica': 'North America',\n    'Croatia': 'Europe',\n    'Cyprus': 'Europe',\n    'Czechia': 'Europe',\n    'Denmark': 'Europe',\n    'Estonia': 'Europe',\n    'Finland': 'Europe',\n    'France': 'Europe',\n    'Germany': 'Europe',\n    'Greece': 'Europe',\n    'Hungary': 'Europe',\n    'Iceland': 'Europe',\n    'India': 'Asia',\n    'Indonesia': 'Asia',\n    'Ireland': 'Europe',\n    'Israel': 'Asia',\n    'Italy': 'Europe',\n    'Japan': 'Asia',\n    'Korea': 'Asia',\n    'Latvia': 'Europe',\n    'Lithuania': 'Europe',\n    'Luxembourg': 'Europe',\n    'Malta': 'Europe',\n    'Mexico': 'North America',\n    'Netherlands': 'Europe',\n    'New Zealand': 'Oceania',\n    'Norway': 'Europe',\n    'Poland': 'Europe',\n    'Portugal': 'Europe',\n    'Romania': 'Europe',\n    'Russia': 'Europe',\n    'Slovak Republic': 'Europe',\n    'Slovenia': 'Europe',\n    'South Africa': 'Africa',\n    'Spain': 'Europe',\n    'Sweden': 'Europe',\n    'Switzerland': 'Europe',\n    'Türkiye': 'Asia',\n    'United Kingdom': 'Europe',\n    'United States': 'North America'\n}\n\n\nimport plotly.graph_objects as go\nimport pandas as pd\n\nmelted_df['Continent'] = melted_df['Country'].map(country_to_continent)\nmelted_df['Year'] = pd.to_datetime(melted_df['Year'])\n\nfig = go.Figure()\nfor country in melted_df['Country'].unique():\n    df_country = melted_df[melted_df['Country'] == country]\n    fig.add_trace(\n        go.Scatter(x=df_country['Year'],\n                   y=df_country['Fertility Rate'],\n                   name=country));\n\n/Users/kendallgilbert/anaconda3/lib/python3.11/site-packages/_plotly_utils/basevalidators.py:106: FutureWarning:\n\nThe behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result\n\n# List of Buttons\ndropdown_options = [\n    {'label': 'All Continents',\n     'method': 'update',\n     'args': [{'visible': [True] * len(melted_df)},\n              {'title': 'Fertility Rate Over Time in All Continents'}]}\n]\nfor continent in melted_df['Continent'].unique():\n    dropdown_options.append(\n        {'label': continent,\n         'method': 'update',\n         'args': [{'visible': melted_df['Continent'] == continent},\n                  {'title': 'Fertility Rate Over Time in ' + continent}]})\n\nfig.update_layout(updatemenus=[\n    dict(buttons=dropdown_options,\n         direction=\"down\",\n         pad={\"r\": 10, \"t\": 10},\n         showactive=True,\n         x=0.99, \n         xanchor=\"right\",\n         y=1.15,\n         yanchor=\"top\")]);\n\n#Replacement line\nfig.add_shape(type=\"line\",\n              x0=min(melted_df['Year']),\n              y0=2,\n              x1=max(melted_df['Year']),\n              y1=2,\n              line=dict(color=\"black\", width=3, dash=\"dash\"),\n              opacity=0.5);\n\n\nfig.add_annotation(text=\"Replacement\",\n                   xref=\"paper\", yref=\"y\",\n                   x=-0.1, y=1.95,\n                   showarrow=False,\n                   font=dict(color=\"black\"));\n\nfig.update_layout(title_text=\"Fertility Rate by Country Over Time\", xaxis_title = \"Year\", yaxis_title = \"Average Number of Children per Woman\", yaxis_title_standoff=60);\n\nfig.show()"
  },
  {
    "objectID": "Population.html",
    "href": "Population.html",
    "title": "Population",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly as py\n#from chart_studio import plotly\nimport plotly.express as px\n\n\ndf = pd.read_csv('Data_cleaned/pop.csv')\ndf.head()\n\n\n\n\n\n\n\n\nUnnamed: 0\npopulation\nCountry_Year\n\n\n\n\n0\n0\n19029000\nAustralia_2000\n\n\n1\n1\n8011566\nAustria_2000\n\n\n2\n2\n10251250\nBelgium_2000\n\n\n3\n3\n30685730\nCanada_2000\n\n\n4\n4\n15397780\nChile_2000\n\n\n\n\n\n\n\n\ndf = df.drop(columns=['Unnamed: 0'])\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n\n\n\n\n\n\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\n\n\n\n\n0\n19029000\nAustralia\n2000\n\n\n1\n8011566\nAustria\n2000\n\n\n2\n10251250\nBelgium\n2000\n\n\n3\n30685730\nCanada\n2000\n\n\n4\n15397780\nChile\n2000\n\n\n\n\n\n\n\n\nprint(df['Country'].unique())\n\n['Australia' 'Austria' 'Belgium' 'Canada' 'Chile' 'Colombia' 'Czechia'\n 'Denmark' 'Estonia' 'Finland' 'France' 'Germany' 'Greece' 'Hungary'\n 'Iceland' 'Ireland' 'Israel' 'Italy' 'Japan' 'Korea' 'Luxembourg'\n 'Mexico' 'Netherlands' 'New Zealand' 'Norway' 'Poland' 'Portugal'\n 'Slovak Republic' 'Slovenia' 'Spain' 'Sweden' 'Switzerland' 'Türkiye'\n 'United Kingdom' 'United States' 'World' 'Brazil' 'China' 'India'\n 'Indonesia' 'Russia' 'South Africa']\n\n\n\n\niso_mapping = {\n    'Australia': 'AUS',\n    'Austria': 'AUT',\n    'Belgium': 'BEL',\n    'Canada': 'CAN',\n    'Chile': 'CHL',\n    'Colombia': 'COL',\n    'Czechia': 'CZE',\n    'Denmark': 'DNK',\n    'Estonia': 'EST',\n    'Finland': 'FIN',\n    'France': 'FRA',\n    'Germany': 'DEU',\n    'Greece': 'GRC',\n    'Hungary': 'HUN',\n    'Iceland': 'ISL',\n    'Ireland': 'IRL',\n    'Israel': 'ISR',\n    'Italy': 'ITA',\n    'Japan': 'JPN',\n    'Korea': 'KOR',\n    'Luxembourg': 'LUX',\n    'Mexico': 'MEX',\n    'Netherlands': 'NLD',\n    'New Zealand': 'NZL',\n    'Norway': 'NOR',\n    'Poland': 'POL',\n    'Portugal': 'PRT',\n    'Slovak Republic': 'SVK',\n    'Slovenia': 'SVN',\n    'Spain': 'ESP',\n    'Sweden': 'SWE',\n    'Switzerland': 'CHE',\n    'Türkiye': 'TUR',\n    'United Kingdom': 'GBR',\n    'United States': 'USA',\n    'World': 'WLD',  \n    'Brazil': 'BRA',\n    'China': 'CHN',\n    'India': 'IND',\n    'Indonesia': 'IDN',\n    'Russia': 'RUS',\n    'South Africa': 'ZAF'\n}\n\n\ndf['CODE'] = df['Country'].map(iso_mapping)\n\n\ndf.head()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\nCODE\n\n\n\n\n0\n19029000\nAustralia\n2000\nAUS\n\n\n1\n8011566\nAustria\n2000\nAUT\n\n\n2\n10251250\nBelgium\n2000\nBEL\n\n\n3\n30685730\nCanada\n2000\nCAN\n\n\n4\n15397780\nChile\n2000\nCHL\n\n\n\n\n\n\n\n\ndf['Year'] = df['Year'].astype(int)\ndf = df[df['Year'] != 2000]\ndf = df[df['Year'] != 2014]\n\ndf.tail()\n\n\n\n\n\n\n\n\npopulation\nCountry\nYear\nCODE\n\n\n\n\n583\n1385567000\nChina\n2013\nCHN\n\n\n584\n1252140000\nIndia\n2013\nIND\n\n\n585\n249865600\nIndonesia\n2013\nIDN\n\n\n586\n143507000\nRussia\n2013\nRUS\n\n\n587\n..\nSouth Africa\n2013\nZAF\n\n\n\n\n\n\n\n\n\n\nframes = []\nsliders = []\n\n# Generating frames\nfor year, group in df.groupby('Year'):\n    frame = go.Frame(\n        data=[go.Choropleth(\n            locations=group['CODE'],\n            z=group['population'],\n            text=group['Country'],\n            #colorscale='Reds',\n            autocolorscale=True,\n            colorbar_title='Population',\n        )],\n        name=str(year)\n    )\n    frames.append(frame)\n\n    slider_step = {\"args\": [\n        [year],\n        {\"frame\": {\"duration\": 300, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 300}}\n    ],\n        \"label\": year,\n        \"method\": \"animate\"}\n    sliders.append(slider_step)\n\n# making the figure\nfig = go.Figure(\n    data=[go.Choropleth(\n        locations=df['CODE'],\n        z=df['population'],\n        text=df['Country'],\n        #colorscale='Reds',\n        autocolorscale=True,\n        colorbar_title='Population',\n    )],\n    frames=frames\n)\n\n# adding features like title, slider, buttons\nfig.update_layout(\n    title={\n        'text': \"Population by Country\",\n        'x':0.5,  \n        'y':0.95  \n    },\n    title_font=dict(size=30,\n                    color='black',\n                    family='Times New Roman'),\n    autosize=False,\n    width=1000,\n    height=500,\n    margin=dict(\n        l=10,\n        r=10,\n        b=70,\n        t=70,\n        pad=4,),\n    paper_bgcolor=\"grey\",\n    sliders=[{\n        \"active\": 0,\n        \"currentvalue\": {\"prefix\": \"Year: \"},\n        \"steps\": sliders,\n        \"pad\": {\"t\": 50}\n    }],\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        projection_type='equirectangular'\n    ),\n    updatemenus=[\n        {\n            \"buttons\": [\n                {\n                    \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": True}, \"fromcurrent\": True}],\n                    \"label\": \"Play\",\n                    \"method\": \"animate\",\n                },\n                {\n                    \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": True}, \"mode\": \"immediate\", \"transition\": {\"duration\": 0}}],\n                    \"label\": \"Pause\",\n                    \"method\": \"animate\",\n                }\n            ],\n            \"direction\": \"left\",\n            \"pad\": {\"r\": 10, \"t\": 87},\n            \"showactive\": True,\n            \"type\": \"buttons\",\n            \"x\": 0.1,\n            \"xanchor\": \"right\",\n            \"y\": 0.4,\n            \"yanchor\": \"top\"\n        }\n    ]\n)\n\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nneed to fix tooltip and the colors/data are not distinct enough"
  },
  {
    "objectID": "Immigration.html",
    "href": "Immigration.html",
    "title": "Immigration",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n\ndf = pd.read_csv('Data_cleaned/immigration.csv')\ndf = df.drop(columns='Unnamed: 0')\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n\n\n\n\n\n\ndf['Country'] = df['Country_Year'].str.split('_').str.get(0)\ndf['Year'] = df['Country_Year'].str.split('_').str.get(1)\ndf = df.drop(columns=['Country_Year'])\ndf = df.drop(df.index[0])\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\ndf.shape\n\n(850, 3)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry\nYear\n\n\n\n\n1\n107148\nAustralia\n2000\n\n\n2\n65954\nAustria\n2000\n\n\n3\n57295\nBelgium\n2000\n\n\n4\n227455\nCanada\n2000\n\n\n5\n18741\nChile\n2000\n\n\n\n\n\n\n\n\n\ndf['immigration_rate'] = pd.to_numeric(df['immigration_rate'], errors='coerce')\ndf = df.dropna()\n\npivot_df = df.pivot_table(index='Year', columns='Country', values='immigration_rate')\npivot_df = pivot_df.drop(columns=['Year'])\npivot_df = pivot_df.reset_index()\n\n\npivot_df.head()\n\n\n\n\n\n\n\nCountry\nYear\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\n...\nPoland\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nTürkiye\nUnited Kingdom\nUnited States\n\n\n\n\n0\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n...\n15897.0\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\nNaN\n260424.0\n841002.0\n\n\n1\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n...\n21466.0\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\nNaN\n262239.0\n1058902.0\n\n\n2\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n...\n30243.0\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\nNaN\n288770.0\n1059356.0\n\n\n3\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n...\n30325.0\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\nNaN\n327405.0\n703542.0\n\n\n4\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n...\n36851.0\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\nNaN\n434322.0\n957883.0\n\n\n\n\n5 rows × 36 columns\n\n\n\n\nnan_per_row = pivot_df.isna().sum(axis=1)\nnan_per_column = pivot_df.isna().sum()\nfor country, nan_count in nan_per_column.items(): \n    if nan_count &gt; 0: \n        print(f\"NaN count for {country}: {nan_count}\")\n\nNaN count for Australia: 1\nNaN count for Austria: 1\nNaN count for Belgium: 1\nNaN count for Canada: 1\nNaN count for Czechia: 1\nNaN count for Denmark: 1\nNaN count for Estonia: 5\nNaN count for Finland: 1\nNaN count for France: 1\nNaN count for Germany: 1\nNaN count for Greece: 6\nNaN count for Iceland: 1\nNaN count for Ireland: 1\nNaN count for Israel: 1\nNaN count for Italy: 1\nNaN count for Japan: 1\nNaN count for Korea: 1\nNaN count for Latvia: 4\nNaN count for Luxembourg: 1\nNaN count for Netherlands: 1\nNaN count for Norway: 1\nNaN count for Poland: 1\nNaN count for Portugal: 1\nNaN count for Slovenia: 8\nNaN count for Spain: 1\nNaN count for Sweden: 1\nNaN count for Switzerland: 1\nNaN count for Türkiye: 16\nNaN count for United Kingdom: 3\nNaN count for United States: 1\n\n\n\npivot_df=pivot_df.drop(columns=['Türkiye'])\n\n\npivot_df.head()\n\n\n\n\n\n\n\nCountry\nYear\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\n...\nNorway\nPoland\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nUnited Kingdom\nUnited States\n\n\n\n\n0\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n...\n27785.0\n15897.0\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\n260424.0\n841002.0\n\n\n1\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n...\n25412.0\n21466.0\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\n262239.0\n1058902.0\n\n\n2\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n...\n30788.0\n30243.0\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\n288770.0\n1059356.0\n\n\n3\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n...\n26787.0\n30325.0\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\n327405.0\n703542.0\n\n\n4\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n...\n27864.0\n36851.0\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\n434322.0\n957883.0\n\n\n\n\n5 rows × 35 columns\n\n\n\n\nother_df = df.pivot(index = 'Country', columns = 'Year', values= 'immigration_rate')\nother_df = other_df.reset_index()\nother_df = other_df.drop(columns=['2022'])\n\nother_df.head()\n\n\n\n\n\n\n\nYear\nCountry\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n...\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\nAustralia\n107148.0\n127877.0\n119080.0\n123411.0\n146441.0\n161734.0\n176205.0\n189490.0\n203874.0\n...\n235993.0\n244849.0\n233908.0\n223654.0\n218488.0\n224220.0\n186640.0\n155817.0\n137465.0\n153826.0\n\n\n1\nAustria\n65954.0\n74786.0\n86144.0\n93341.0\n104246.0\n97995.0\n82899.0\n91546.0\n94368.0\n...\n125605.0\n135228.0\n154260.0\n198658.0\n158746.0\n139329.0\n131724.0\n134966.0\n121311.0\n139543.0\n\n\n2\nBelgium\n57295.0\n65974.0\n70230.0\n68800.0\n72446.0\n77411.0\n83433.0\n93387.0\n106012.0\n...\n116055.0\n105529.0\n106345.0\n128762.0\n106087.0\n109167.0\n119663.0\n129450.0\n101553.0\n122386.0\n\n\n3\nCanada\n227455.0\n250640.0\n228919.0\n221349.0\n235822.0\n262244.0\n251641.0\n236751.0\n247242.0\n...\n257763.0\n259034.0\n260283.0\n271808.0\n296740.0\n286447.0\n321042.0\n341175.0\n184585.0\n405795.0\n\n\n4\nChile\n18741.0\n28924.0\n29942.0\n29835.0\n32099.0\n40793.0\n37035.0\n53071.0\n43577.0\n...\n65247.0\n84352.0\n83549.0\n101911.0\n135490.0\n207200.0\n339350.0\n254080.0\n154551.0\n76545.0\n\n\n\n\n5 rows × 23 columns\n\n\n\n\nother_df.set_index('Country', inplace=True)\n\ndf_transposed = other_df.transpose()\ndf_transposed.head()\n\n\n\n\n\n\n\nCountry\nAustralia\nAustria\nBelgium\nCanada\nChile\nCzechia\nDenmark\nEstonia\nFinland\nFrance\n...\nPortugal\nSlovak Republic\nSlovenia\nSpain\nSweden\nSwitzerland\nTürkiye\nUnited Kingdom\nUnited States\nYear\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2000\n107148.0\n65954.0\n57295.0\n227455.0\n18741.0\n4227.0\n22766.0\nNaN\n9110.0\n91875.0\n...\n15932.0\n4622.0\nNaN\n330881.0\n42216.0\n87448.0\nNaN\n260424.0\n841002.0\nNaN\n\n\n2001\n127877.0\n74786.0\n65974.0\n250640.0\n28924.0\n11323.0\n24642.0\nNaN\n11037.0\n106877.0\n...\n151433.0\n4723.0\nNaN\n394048.0\n43833.0\n101353.0\nNaN\n262239.0\n1058902.0\n2001.0\n\n\n2002\n119080.0\n86144.0\n70230.0\n228919.0\n29942.0\n43648.0\n21485.0\nNaN\n9972.0\n124232.0\n...\n71974.0\n4784.0\nNaN\n443085.0\n47603.0\n101876.0\nNaN\n288770.0\n1059356.0\n2002.0\n\n\n2003\n123411.0\n93341.0\n68800.0\n221349.0\n29835.0\n57438.0\n18385.0\nNaN\n9432.0\n136370.0\n...\n31754.0\n4562.0\nNaN\n429524.0\n47988.0\n94049.0\nNaN\n327405.0\n703542.0\n2003.0\n\n\n2004\n146441.0\n104246.0\n72446.0\n235822.0\n32099.0\n50804.0\n18706.0\n759.0\n11511.0\n141554.0\n...\n34096.0\n7919.0\nNaN\n645844.0\n47580.0\n96270.0\nNaN\n434322.0\n957883.0\n2004.0\n\n\n\n\n5 rows × 36 columns\n\n\n\n\n\n\n# Plot the stacked area chart\nplt.figure(figsize=(10, 6))\ndf_transposed.plot(kind='area', stacked=True)\nplt.title('Stacked Area Chart of Immigration by Country')\nplt.xlabel('Year')\nplt.ylabel('Immigration')\nplt.legend(title='Country', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\ndf = df[df['Year'] != '2022']\ndf = df.rename(columns = {'immigration_rate' : 'Migrants'})\nfig = px.area(df, \n              x=\"Year\", \n              y= \"Migrants\", \n              color=\"Country\", \n              #line_group=\"country\",\n              title='', \n              )\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "gdp_nni.html",
    "href": "gdp_nni.html",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\nfertility\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2892379672.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/262549689.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/31041099.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2863281320.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/3140687827.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2836068908.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/707146143.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2264265670.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Sample merged DataFrame\ngdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)\ngdp.drop(columns=['Country_Year'], inplace=True)\ngdp['gdp'] = pd.to_numeric(gdp['gdp'].str.replace(',', ''), errors='coerce')\ngdp.dropna(inplace=True)\nheatmap_data = gdp.pivot(index='Year', columns='Country')\ndata_to_plot = heatmap_data['gdp']\ndata_to_plot.reset_index(inplace=True)\ndata_to_plot_melted = pd.melt(data_to_plot, id_vars=['Year'], var_name='Country', value_name='GDP')\n\n# Create choropleth map\nfig = px.choropleth(data_to_plot_melted, \n                    locations='Country',\n                    locationmode='country names',\n                    color='GDP',\n                    hover_name='Country',\n                    animation_frame='Year',\n                    color_continuous_scale='YlGnBu',\n                    title='GDP Choropleth Map by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Sample merged DataFrame\nnni[['Country', 'Year']] = nni['Country_Year'].str.split('_', expand=True)\nnni.drop(columns=['Country_Year'], inplace=True)\nnni['nni'] = pd.to_numeric(nni['nni'].str.replace(',', ''), errors='coerce')\nnni.dropna(inplace=True)\nheatmap_data = nni.pivot(index='Year', columns='Country')\ndata_to_plot = heatmap_data['nni']  # or heatmap_data['nni']\ndata_to_plot.reset_index(inplace=True)\ndata_to_plot_melted = pd.melt(data_to_plot, id_vars=['Year'], var_name='Country', value_name='nni')\n\n# Create choropleth map\nfig = px.choropleth(data_to_plot_melted, \n                    locations='Country',\n                    locationmode='country names',\n                    color='nni',\n                    hover_name='Country',\n                    animation_frame='Year',\n                    color_continuous_scale='YlGnBu',\n                    title='NNI Choropleth Map by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\naverage_data = merged_data.groupby('Year').agg({'gdp': 'mean', 'nni': 'mean'}).reset_index()\nfig = px.scatter(average_data, x='gdp', y='nni', \n                 title='Scatterplot of Average GDP vs Average NNI', \n                 labels={'gdp': 'Average GDP', 'nni': 'Average NNI'})\nfig.show()\n\n\nNameError: name 'merged_data' is not defined\n\n\n\n\nCode\n\nmerged_data = pd.merge(gdp, nni, on=['Country', 'Year'])\nmerged_data = merged_data[merged_data['Country'] != 'Euro_area']\nmerged_data.dropna(subset=['gdp', 'nni'], inplace=True)\nfig = px.scatter(merged_data, x='gdp', y='nni', color='Country', animation_frame='Year',\n                 title='Scatterplot of GDP vs NNI by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\nimport plotly.graph_objects as go\n\n# Convert 'gdp' and 'age' columns to numeric data types\nmerged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')\nmerged_data['age'] = pd.to_numeric(merged_data['age'], errors='coerce')\n\naverage_data = merged_data.groupby(['Country', 'Year']).agg({'gdp': 'mean', 'age': 'mean'}).reset_index()\ntraces = []\nfor country in average_data['Country'].unique():\n    country_data = average_data[average_data['Country'] == country]\n    trace = go.Scatter(x=country_data['Year'], y=country_data['age'], mode='lines', name=country)\n    traces.append(trace)\n\nlayout = go.Layout(\n    title='Average Life Expectancy Over Time by Country',\n    xaxis=dict(title='Year'),\n    yaxis=dict(title='Life Expectancy')\n)\n\nfig = go.Figure(data=traces, layout=layout)\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "gdp_nni.html#cleaning-and-tidying-datasets",
    "href": "gdp_nni.html#cleaning-and-tidying-datasets",
    "title": "Cleaning",
    "section": "",
    "text": "Fertility Data set\n\n\nCode\n#Fertility \nimport pandas as pd\nfertility = pd.read_csv(\"Data_Uncleaned/Fertility.csv\")\nfertility = fertility.rename(columns={'Year': 'Country'})\nfertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nfertility = pd.melt(fertility, id_vars=['Country'], var_name='Year', value_name='fertility_rate')\n#Joining country and year to make easy when merging\nfertility['Country_Year'] = fertility['Country'] + '_' + fertility['Year'].astype(str)\nfertility = fertility.drop(columns=['Country', 'Year'])\nfertility\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2892379672.py:5: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  fertility = fertility.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nfertility_rate\nCountry_Year\n\n\n\n\n0\n1.9\nAustralia_1990\n\n\n1\n1.46\nAustria_1990\n\n\n2\n1.62\nBelgium_1990\n\n\n3\n1.71\nCanada_1990\n\n\n4\n2.58\nChile_1990\n\n\n...\n...\n...\n\n\n1645\n..\nIndonesia_2022\n\n\n1646\n..\nMalta_2022\n\n\n1647\n..\nRomania_2022\n\n\n1648\n..\nRussia_2022\n\n\n1649\n..\nSouth Africa_2022\n\n\n\n\n1650 rows × 2 columns\n\n\n\nGDP Dataset\n\n\nCode\n#Importing Data into Python Environment\ngdp = pd.read_csv(\"Data_Uncleaned/GDP.csv\")\ngdp = gdp.rename(columns={'Time': 'Country'})\ngdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ngdp = pd.melt(gdp, id_vars=['Country'], var_name='Year', value_name='gdp')\ngdp['Country_Year'] = gdp['Country'] + '_' + gdp['Year'].astype(str)\ngdp = gdp.drop(columns=['Country', 'Year'])\ngdp\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/262549689.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  gdp = gdp.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\ngdp\nCountry_Year\n\n\n\n\n0\n539.15\nAustralia_2000\n\n\n1\n235.38\nAustria_2000\n\n\n2\n284.86\nBelgium_2000\n\n\n3\n901\nCanada_2000\n\n\n4\n145.36\nChile_2000\n\n\n...\n...\n...\n\n\n1075\n32,775.12\nChina_2023\n\n\n1076\n..\nIndia_2023\n\n\n1077\n4,378.31\nIndonesia_2023\n\n\n1078\n..\nRussia_2023\n\n\n1079\n..\nSouth Africa_2023\n\n\n\n\n1080 rows × 2 columns\n\n\n\nImmigration Inflow Dataset\n\n\nCode\n#Importing Data into Python Environment\nimmigration = pd.read_csv(\"Data_Uncleaned/immigration.csv\")\n\nnew_header = immigration.iloc[0] #Grabbing the first row for the header\nmpa = immigration[1:] #Taking the data less the header row\nimmigration.columns = new_header #Setting the header row as the df header\nimmigration = immigration.rename(columns={'Year': 'Country', 2000.0: 2000, 2005.0: 2005, 2010.0: 2010, 2011.0: 2011, 2012.0: 2012, 2013.0: 2013, 2014.0: 2014, 2015.0: 2015,2016.0: 2016,2017.0: 2017,\n                          2018.0: 2018,2019.0: 2019,2020.0: 2020,})\n\nimmigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nimmigration = pd.melt(immigration, id_vars=['Country'], var_name='Year', value_name='immigration_rate')\n\nimmigration['Country_Year'] = immigration['Country'] + '_' + immigration['Year'].astype(str)\nimmigration = immigration.drop(columns=['Country', 'Year'])\nimmigration\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/31041099.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  immigration = immigration.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nimmigration_rate\nCountry_Year\n\n\n\n\n0\n2000\nYear_2000\n\n\n1\n107148\nAustralia_2000\n\n\n2\n65954\nAustria_2000\n\n\n3\n57295\nBelgium_2000\n\n\n4\n227455\nCanada_2000\n\n\n...\n...\n...\n\n\n846\n..\nSwitzerland_2022\n\n\n847\n..\nTürkiye_2022\n\n\n848\n..\nUnited Kingdom_2022\n\n\n849\n..\nUnited States_2022\n\n\n850\nNaN\nNaN\n\n\n\n\n851 rows × 2 columns\n\n\n\nInfant Mortality\n\n\nCode\n\ni_m = pd.read_csv(\"Data_Uncleaned/infant_mortality.csv\", header=1)\ni_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\ni_m = i_m.rename(columns={'Year': 'Country'})\ni_m = pd.melt(i_m, id_vars=['Country'], var_name='Year', value_name='mortality_rate')\n\ni_m['Country_Year'] = i_m['Country'] + '_' + i_m['Year'].astype(str)\ni_m = i_m.drop(columns=['Country', 'Year'])\ni_m\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2863281320.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  i_m = i_m.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nmortality_rate\nCountry_Year\n\n\n\n\n0\n8.2\nAustralia_1990\n\n\n1\n7.8\nAustria_1990\n\n\n2\n8\nBelgium_1990\n\n\n3\n6.8\nCanada_1990\n\n\n4\n16\nChile_1990\n\n\n...\n...\n...\n\n\n1315\n..\nChina_2019\n\n\n1316\n..\nIndia_2019\n\n\n1317\n..\nIndonesia_2019\n\n\n1318\n..\nRussia_2019\n\n\n1319\n..\nSouth Africa_2019\n\n\n\n\n1320 rows × 2 columns\n\n\n\nNEt National Income Dataset\n\n\nCode\n\nnni = pd.read_csv(\"Data_Uncleaned/NNI.csv\")\nnni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nnni = nni.rename(columns={'Year': 'Country'})\nnni = pd.melt(nni, id_vars=['Country'], var_name='Year', value_name='nni')\nnni['Country_Year'] = nni['Country'] + '_' + nni['Year'].astype(str)\nnni = nni.drop(columns=['Country', 'Year'])\nnni\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/3140687827.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  nni = nni.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nnni\nCountry_Year\n\n\n\n\n0\n31,878.30\nAustralia_2003\n\n\n1\n37,926.00\nAustria_2003\n\n\n2\n12,755.70\nChile_2003\n\n\n3\n19,612.70\nCzechia_2003\n\n\n4\n36,006.90\nDenmark_2003\n\n\n...\n...\n...\n\n\n675\n..\nUnited Kingdom_2022\n\n\n676\n35,081.90\nEuro area_2022\n\n\n677\n33,795.30\nEuropean Union_2022\n\n\n678\n..\nRussia_2022\n\n\n679\n11,683.50\nSouth Africa_2022\n\n\n\n\n680 rows × 2 columns\n\n\n\nPopulation Dataset\n\n\nCode\npop = pd.read_csv(\"Data_Uncleaned/population.csv\")\npop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop = pop.rename(columns={'Time': 'Country'})\npop = pd.melt(pop, id_vars=['Country'], var_name='Year', value_name='population')\npop['Country_Year'] = pop['Country'] + '_' + pop['Year'].astype(str)\npop = pop.drop(columns=['Country', 'Year'])\npop\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2836068908.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop = pop.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n19029000\nAustralia_2000\n\n\n1\n8011566\nAustria_2000\n\n\n2\n10251250\nBelgium_2000\n\n\n3\n30685730\nCanada_2000\n\n\n4\n15397780\nChile_2000\n\n\n...\n...\n...\n\n\n625\n..\nChina_2014\n\n\n626\n..\nIndia_2014\n\n\n627\n..\nIndonesia_2014\n\n\n628\n..\nRussia_2014\n\n\n629\n..\nSouth Africa_2014\n\n\n\n\n630 rows × 2 columns\n\n\n\nWorking Population Dataset\n\n\nCode\npop_working = pd.read_csv(\"Data_Uncleaned/population_working.csv\")\npop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\npop_working = pop_working.rename(columns={'Time period': 'Country'})\npop_working = pd.melt(pop_working, id_vars=['Country'], var_name='Year', value_name='population')\npop_working = pop_working[pop_working.Country != '© Terms & conditions']\npop_working = pop_working[pop_working.Country != 'Unnamed: 14']\npop_working['Country_Year'] = pop_working['Country'] + '_' + pop_working['Year'].astype(str)\npop_working = pop_working.drop(columns=['Country', 'Year'])\npop_working\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/707146143.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  pop_working = pop_working.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\npopulation\nCountry_Year\n\n\n\n\n0\n11,814\nAustralia_2011\n\n\n1\n4,246\nAustria_2011\n\n\n2\n4,856\nBelgium_2011\n\n\n3\n18,670\nCanada_2011\n\n\n4\n8,306\nChile_2011\n\n\n...\n...\n...\n\n\n624\nNaN\nEuropean Union_Unnamed: 14\n\n\n625\nNaN\nOECD_Unnamed: 14\n\n\n626\nNaN\nBrazil_Unnamed: 14\n\n\n627\nNaN\nRussia_Unnamed: 14\n\n\n628\nNaN\nNaN\n\n\n\n\n616 rows × 2 columns\n\n\n\n\n\nCode\nl_e = pd.read_csv(\"Data_Uncleaned/life_expectancy.csv\", header = 1)\nl_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nl_e = l_e.rename(columns={'Year': 'Country'})\nl_e = pd.melt(l_e, id_vars=['Country'], var_name='Year', value_name='age')\nl_e\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_48627/2264265670.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  l_e = l_e.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\n\n\n\n\n\n\n\nCountry\nYear\nage\n\n\n\n\n0\nAustralia\n2010\n81.7\n\n\n1\nAustria\n2010\n80.7\n\n\n2\nBelgium\n2010\n80.3\n\n\n3\nCanada\n2010\n81.4\n\n\n4\nChile\n2010\n78.7\n\n\n...\n...\n...\n...\n\n\n632\nIndonesia\n2022\n67.6\n\n\n633\nPeru\n2022\n72.4\n\n\n634\nRomania\n2022\n75.3\n\n\n635\nRussia\n2022\n..\n\n\n636\nSouth Africa\n2022\n62.3\n\n\n\n\n637 rows × 3 columns\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Sample merged DataFrame\ngdp[['Country', 'Year']] = gdp['Country_Year'].str.split('_', expand=True)\ngdp.drop(columns=['Country_Year'], inplace=True)\ngdp['gdp'] = pd.to_numeric(gdp['gdp'].str.replace(',', ''), errors='coerce')\ngdp.dropna(inplace=True)\nheatmap_data = gdp.pivot(index='Year', columns='Country')\ndata_to_plot = heatmap_data['gdp']\ndata_to_plot.reset_index(inplace=True)\ndata_to_plot_melted = pd.melt(data_to_plot, id_vars=['Year'], var_name='Country', value_name='GDP')\n\n# Create choropleth map\nfig = px.choropleth(data_to_plot_melted, \n                    locations='Country',\n                    locationmode='country names',\n                    color='GDP',\n                    hover_name='Country',\n                    animation_frame='Year',\n                    color_continuous_scale='YlGnBu',\n                    title='GDP Choropleth Map by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Sample merged DataFrame\nnni[['Country', 'Year']] = nni['Country_Year'].str.split('_', expand=True)\nnni.drop(columns=['Country_Year'], inplace=True)\nnni['nni'] = pd.to_numeric(nni['nni'].str.replace(',', ''), errors='coerce')\nnni.dropna(inplace=True)\nheatmap_data = nni.pivot(index='Year', columns='Country')\ndata_to_plot = heatmap_data['nni']  # or heatmap_data['nni']\ndata_to_plot.reset_index(inplace=True)\ndata_to_plot_melted = pd.melt(data_to_plot, id_vars=['Year'], var_name='Country', value_name='nni')\n\n# Create choropleth map\nfig = px.choropleth(data_to_plot_melted, \n                    locations='Country',\n                    locationmode='country names',\n                    color='nni',\n                    hover_name='Country',\n                    animation_frame='Year',\n                    color_continuous_scale='YlGnBu',\n                    title='NNI Choropleth Map by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\naverage_data = merged_data.groupby('Year').agg({'gdp': 'mean', 'nni': 'mean'}).reset_index()\nfig = px.scatter(average_data, x='gdp', y='nni', \n                 title='Scatterplot of Average GDP vs Average NNI', \n                 labels={'gdp': 'Average GDP', 'nni': 'Average NNI'})\nfig.show()\n\n\nNameError: name 'merged_data' is not defined\n\n\n\n\nCode\n\nmerged_data = pd.merge(gdp, nni, on=['Country', 'Year'])\nmerged_data = merged_data[merged_data['Country'] != 'Euro_area']\nmerged_data.dropna(subset=['gdp', 'nni'], inplace=True)\nfig = px.scatter(merged_data, x='gdp', y='nni', color='Country', animation_frame='Year',\n                 title='Scatterplot of GDP vs NNI by Country and Year')\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nCode\nimport plotly.graph_objects as go\n\n# Convert 'gdp' and 'age' columns to numeric data types\nmerged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')\nmerged_data['age'] = pd.to_numeric(merged_data['age'], errors='coerce')\n\naverage_data = merged_data.groupby(['Country', 'Year']).agg({'gdp': 'mean', 'age': 'mean'}).reset_index()\ntraces = []\nfor country in average_data['Country'].unique():\n    country_data = average_data[average_data['Country'] == country]\n    trace = go.Scatter(x=country_data['Year'], y=country_data['age'], mode='lines', name=country)\n    traces.append(trace)\n\nlayout = go.Layout(\n    title='Average Life Expectancy Over Time by Country',\n    xaxis=dict(title='Year'),\n    yaxis=dict(title='Life Expectancy')\n)\n\nfig = go.Figure(data=traces, layout=layout)\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "social_spending_chart.html",
    "href": "social_spending_chart.html",
    "title": "5200 Project",
    "section": "",
    "text": "import pandas as pd\nimport plotly.graph_objects as go\n\n# Read the data\nsocial_spending = pd.read_csv(\"/Users/kendallgilbert/Desktop/social_spending.csv\", header=1)\ngdp = pd.read_csv(\"/Users/kendallgilbert/Desktop/DSAN5200-Project/5200 Project/Data_cleaned/gdp.csv\")\n\n# Clean and merge the data\nsocial_spending = social_spending.rename(columns={'Year': 'Country'})\nsocial_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nsocial_spending = pd.melt(social_spending, id_vars=['Country'], var_name='Year', value_name='s_s')\nsocial_spending['Country_Year'] = social_spending['Country'] + '_' + social_spending['Year'].astype(str)\n\nmerged_data = pd.merge(gdp, social_spending, on=['Country_Year'])\nmerged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')\nmerged_data['s_s'] = pd.to_numeric(merged_data['s_s'], errors='coerce')\nmerged_data['gdp'] = merged_data['gdp'].fillna(merged_data['gdp'].mean())\nmerged_data['s_s'] = merged_data['s_s'].fillna(merged_data['s_s'].mean())\n\n\n# Calculate the average social spending over all years for each country\naverage_social_spending = merged_data.groupby('Country')['s_s'].mean().reset_index()\n\n# Calculate the average GDP over all years for each country\naverage_gdp = merged_data.groupby('Country')['gdp'].mean().reset_index()\n\n# Merge the average social spending and average GDP data\naverage_data = pd.merge(average_social_spending, average_gdp, on='Country', suffixes=('_s_s', '_gdp'))\n\n# Calculate the ratio of average social spending to average GDP\naverage_data['s_s_gdp_ratio'] = average_data['s_s'] / average_data['gdp']\n\ncolor_map = {\n    'Australia': 'rgb(255, 0, 0)',        # Red\n    'Austria': 'rgb(0, 255, 0)',          # Green\n    'Belgium': 'rgb(0, 0, 255)',          # Blue\n    'Canada': 'rgb(255, 255, 0)',         # Yellow\n    'Chile': 'rgb(255, 0, 255)',          # Magenta\n    'Colombia': 'rgb(0, 255, 255)',       # Cyan\n    'Costa Rica': 'rgb(255, 127, 0)',     # Orange\n    'Czechia': 'rgb(255, 0, 127)',        # Reddish-Pink\n    'Denmark': 'rgb(0, 127, 255)',        # Bluish\n    'Estonia': 'rgb(127, 255, 0)',        # Greenish-Yellow\n    'Finland': 'rgb(0, 255, 127)',        # Greenish\n    'France': 'rgb(127, 0, 255)',         # Purplish-Blue\n    'Germany': 'rgb(255, 255, 127)',      # Light Yellow\n    'Greece': 'rgb(127, 255, 255)',       # Light Cyan\n    'Hungary': 'rgb(255, 127, 255)',      # Light Magenta\n    'Iceland': 'rgb(255, 0, 0)',          # Red\n    'Ireland': 'rgb(0, 255, 0)',          # Green\n    'Israel': 'rgb(0, 0, 255)',           # Blue\n    'Italy': 'rgb(255, 255, 0)',          # Yellow\n    'Japan': 'rgb(255, 0, 255)',          # Magenta\n    'Korea': 'rgb(0, 255, 255)',          # Cyan\n    'Latvia': 'rgb(255, 127, 0)',         # Orange\n    'Lithuania': 'rgb(255, 0, 127)',      # Reddish-Pink\n    'Luxembourg': 'rgb(0, 127, 255)',     # Bluish\n    'Mexico': 'rgb(127, 255, 0)',         # Greenish-Yellow\n    'Netherlands': 'rgb(0, 255, 127)',    # Greenish\n    'New Zealand': 'rgb(127, 0, 255)',    # Purplish-Blue\n    'Norway': 'rgb(255, 255, 127)',      # Light Yellow\n    'Poland': 'rgb(127, 255, 255)',       # Light Cyan\n    'Portugal': 'rgb(255, 127, 255)',     # Light Magenta\n    'Slovak Republic': 'rgb(255, 0, 0)',  # Red\n    'Slovenia': 'rgb(0, 255, 0)',         # Green\n    'Spain': 'rgb(0, 0, 255)',            # Blue\n    'Sweden': 'rgb(255, 255, 0)',         # Yellow\n    'Switzerland': 'rgb(255, 0, 255)',    # Magenta\n    'Türkiye': 'rgb(0, 255, 255)',        # Cyan\n    'United Kingdom': 'rgb(255, 127, 0)', # Orange\n    'United States': 'rgb(255, 0, 127)',  # Reddish-Pink\n    # Add more country-color mappings as needed\n}\n\naverage_data['color'] = average_data['Country'].map(color_map)\n\n# Define bubble sizes based on the ratio of average social spending to GDP\nbubble_sizes = average_data['s_s_gdp_ratio'] * 1000\n\n# Create the bubble chart\nfig = go.Figure(data=go.Scatter(\n    x=average_data['s_s_gdp_ratio'],  # Swapping X and Y values\n    y=average_data['gdp'],  # Swapping X and Y values\n    mode='markers',\n    marker=dict(\n        size=bubble_sizes,\n        sizemode='area',\n        sizeref=2.*max(bubble_sizes)/(100**2),  # Reference scale for bubble sizes\n        sizemin=4,  # Minimum size of the bubble\n        color=average_data['color']\n    ),\n    text=average_data.apply(lambda row: f\"Country: {row['Country']}&lt;br&gt;Avg Social Spending: {row['s_s']:,}&lt;br&gt;Avg GDP: {row['gdp']:,}&lt;br&gt;Ratio: {row['s_s_gdp_ratio']:.4f}\", axis=1),  # Adjust format to include four decimal places\n))\n\n# Update layout\nfig.update_layout(\n    title='Bubble Chart: Average Social Spending vs. GDP',\n    xaxis=dict(title='% of GDP spent towards social benefits'),  # Adjust X-axis label\n    yaxis=dict(title='Average GDP'),  # Adjust Y-axis label\n    showlegend=False\n)\n\n# Show the plot\nfig.show()\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_54529/3726998272.py:10: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  social_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nus_data = average_data[average_data['Country'] == 'United States']\nprint(\"United States Results:\")\nprint(\"Average Social Spending:\", us_data['s_s'].values[0])\nprint(\"Average GDP:\", us_data['gdp'].values[0])\nprint(\"Ratio of Average Social Spending to GDP:\", us_data['s_s_gdp_ratio'].values[0])\n\nUnited States Results:\nAverage Social Spending: 1.3861360718870348\nAverage GDP: 280.074137254902\nRatio of Average Social Spending to GDP: 0.004949175548563701\n\n\n\niceland_data = average_data[average_data['Country'] == 'Iceland']\nprint(\"IcelandResults:\")\nprint(\"Average Social Spending:\", iceland_data['s_s'].values[0])\nprint(\"Average GDP:\", iceland_data['gdp'].values[0])\nprint(\"Ratio of Average Social Spending to GDP:\", iceland_data['s_s_gdp_ratio'].values[0])\n\nIcelandResults:\nAverage Social Spending: 3.0229781771501925\nAverage GDP: 13.97578947368421\nRatio of Average Social Spending to GDP: 0.2163010671305779"
  },
  {
    "objectID": "about.html#gdp",
    "href": "about.html#gdp",
    "title": "Quantifying International Prosperity",
    "section": "GDP",
    "text": "GDP"
  },
  {
    "objectID": "about.html#healthcare",
    "href": "about.html#healthcare",
    "title": "Quantifying International Prosperity",
    "section": "Healthcare",
    "text": "Healthcare"
  },
  {
    "objectID": "about.html#social-spending",
    "href": "about.html#social-spending",
    "title": "Quantifying International Prosperity",
    "section": "Social Spending",
    "text": "Social Spending\nAnother important factor that can determine the well-being of a country is social spending in regards to family benefits. OECD countries spend on average 2.29% of GDP on family benefits, with large variations across countries. These variations are evident as illustrated in the bubble chart below.\nThis spending is beneficial for numerous reasons. First, family benefits help families meet their basic needs. These benefits provide financial assistance that can help with the costs of having a family. By helping families meet their basic needs, social spending on family benefits can improve over wellbeing. Furthermore, spending money on family benefits can directly impact child well-being, healthier work-life balance for parents and economic growth. By supporting families and enabling parents to remain in or return to the workforce, these policies contribute to overall economic stability and prosperity.\nBased on the chart below you can see countries like Iceland, Estonia and Luxembourg dedicate a large percentage of their GDP towards family benefits. Countries like this are notorious for prioritizing well-being and it is proven to be working.\n** Will change colors / labels / axises just wanted to put in for now\n\n\nCode\nimport pandas as pd\nimport plotly.graph_objects as go\n\n# Read the data\nsocial_spending = pd.read_csv(\"Data_cleaned/social_spending.csv\", header=1)\ngdp = pd.read_csv(\"Data_cleaned/gdp.csv\")\n\n# Clean and merge the data\nsocial_spending = social_spending.rename(columns={'Year': 'Country'})\nsocial_spending = social_spending.applymap(lambda x: x.strip() if isinstance(x, str) else x)\nsocial_spending = pd.melt(social_spending, id_vars=['Country'], var_name='Year', value_name='s_s')\nsocial_spending['Country_Year'] = social_spending['Country'] + '_' + social_spending['Year'].astype(str)\n\nmerged_data = pd.merge(gdp, social_spending, on=['Country_Year'])\nmerged_data['gdp'] = pd.to_numeric(merged_data['gdp'], errors='coerce')\nmerged_data['s_s'] = pd.to_numeric(merged_data['s_s'], errors='coerce')\nmerged_data['gdp'] = merged_data['gdp'].fillna(merged_data['gdp'].mean())\nmerged_data['s_s'] = merged_data['s_s'].fillna(merged_data['s_s'].mean())\n\n\naverage_social_spending = merged_data.groupby('Country')['s_s'].mean().reset_index()\naverage_gdp = merged_data.groupby('Country')['gdp'].mean().reset_index()\naverage_data = pd.merge(average_social_spending, average_gdp, on='Country', suffixes=('_s_s', '_gdp'))\naverage_data['s_s_gdp_ratio'] = average_data['s_s'] / average_data['gdp']\n\ncolor_map = {\n    'Australia': 'rgb(255, 0, 0)',        # Red\n    'Austria': 'rgb(0, 255, 0)',          # Green\n    'Belgium': 'rgb(0, 0, 255)',          # Blue\n    'Canada': 'rgb(255, 255, 0)',         # Yellow\n    'Chile': 'rgb(255, 0, 255)',          # Magenta\n    'Colombia': 'rgb(0, 255, 255)',       # Cyan\n    'Costa Rica': 'rgb(255, 127, 0)',     # Orange\n    'Czechia': 'rgb(255, 0, 127)',        # Reddish-Pink\n    'Denmark': 'rgb(0, 127, 255)',        # Bluish\n    'Estonia': 'rgb(127, 255, 0)',        # Greenish-Yellow\n    'Finland': 'rgb(0, 255, 127)',        # Greenish\n    'France': 'rgb(127, 0, 255)',         # Purplish-Blue\n    'Germany': 'rgb(255, 255, 127)',      # Light Yellow\n    'Greece': 'rgb(127, 255, 255)',       # Light Cyan\n    'Hungary': 'rgb(255, 127, 255)',      # Light Magenta\n    'Iceland': 'rgb(255, 0, 0)',          # Red\n    'Ireland': 'rgb(0, 255, 0)',          # Green\n    'Israel': 'rgb(0, 0, 255)',           # Blue\n    'Italy': 'rgb(255, 255, 0)',          # Yellow\n    'Japan': 'rgb(255, 0, 255)',          # Magenta\n    'Korea': 'rgb(0, 255, 255)',          # Cyan\n    'Latvia': 'rgb(255, 127, 0)',         # Orange\n    'Lithuania': 'rgb(255, 0, 127)',      # Reddish-Pink\n    'Luxembourg': 'rgb(0, 127, 255)',     # Bluish\n    'Mexico': 'rgb(127, 255, 0)',         # Greenish-Yellow\n    'Netherlands': 'rgb(0, 255, 127)',    # Greenish\n    'New Zealand': 'rgb(127, 0, 255)',    # Purplish-Blue\n    'Norway': 'rgb(255, 255, 127)',      # Light Yellow\n    'Poland': 'rgb(127, 255, 255)',       # Light Cyan\n    'Portugal': 'rgb(255, 127, 255)',     # Light Magenta\n    'Slovak Republic': 'rgb(255, 0, 0)',  # Red\n    'Slovenia': 'rgb(0, 255, 0)',         # Green\n    'Spain': 'rgb(0, 0, 255)',            # Blue\n    'Sweden': 'rgb(255, 255, 0)',         # Yellow\n    'Switzerland': 'rgb(255, 0, 255)',    # Magenta\n    'Türkiye': 'rgb(0, 255, 255)',        # Cyan\n    'United Kingdom': 'rgb(255, 127, 0)', # Orange\n    'United States': 'rgb(255, 0, 127)',  # Reddish-Pink\n}\n\naverage_data['color'] = average_data['Country'].map(color_map)\nbubble_sizes = average_data['s_s_gdp_ratio'] * 1000\n\nfig = go.Figure(data=go.Scatter(\n    x=average_data['s_s_gdp_ratio'],\n    y=average_data['gdp'],\n    mode='markers',\n    marker=dict(\n        size=bubble_sizes,\n        sizemode='area',\n        sizeref=2.*max(bubble_sizes)/(100**2),\n        sizemin=4,\n        color=average_data['color']\n    ),\n    text=average_data.apply(lambda row: f\"Country: {row['Country']}&lt;br&gt;Avg Social Spending: {row['s_s']:,}&lt;br&gt;Avg GDP: {row['gdp']:,}&lt;br&gt;Ratio: {row['s_s_gdp_ratio']:.4f}\", axis=1),\n))\n\nfig.update_layout(\n    title='Figure 3: Ratio of GDP Spent on Family Benefits',\n    xaxis=dict(title='Average Percentage of GDP spent on Family Benefits'),  \n    yaxis=dict(title='Average GDP (Billions) Over 20 Years'),\n    showlegend=False\n)\n\nfig.show()\n\n\n/var/folders/x3/1m329lgj7sl4y1pqkx_p_f_80000gn/T/ipykernel_55565/498273044.py:10: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n                                                \n\n\nThere is a drastic difference between countries like Iceland and the United States. Add table here"
  },
  {
    "objectID": "about.html#population",
    "href": "about.html#population",
    "title": "Quantifying International Prosperity",
    "section": "Population",
    "text": "Population"
  },
  {
    "objectID": "about.html#introduction",
    "href": "about.html#introduction",
    "title": "Quantifying International Prosperity",
    "section": "",
    "text": "How can we quantify the wellbeing of the individual in various countries? Are some countries more prosperous than others? Can they even be compared? All too often, data scientists fall into the trap of Operationalization. By mis-equating metrics with reality, it is easy to oversimplify extremely complicated and nuanced situations. For example, it is often claimed that policing makes communities safer - but how exactly can we measure safety? At the national scale, this becomes even more complicated. Can countries with billions of people be compared to ones with several hundred thousand? There are countless potential avenues of measurement; Yet it is all too easy to fall into the trap of measuring a countrie’s prosperity with the classical metric: GDP. In this exploration, we will conduct a preliminary investigation into other potential ways to quantify a country’s wellbeing, ultimately suggesting that steps be taken to make this process more holistic\nThis analysis will dive deeper into factors regarding healthcare, social spending on family benefits, wealth distribution and population trends (life expectancy, birth rates) in an attempt to quantify a country’s wellbeing.\na great reference: Stiglitz, Joseph E., Amartya Sen, and Jean-Paul Fitoussi. 2010. Mismeasuring Our Lives: Why GDP Doesn’t Add Up. The New Press."
  },
  {
    "objectID": "about.html#wealth",
    "href": "about.html#wealth",
    "title": "Quantifying International Prosperity",
    "section": "Wealth",
    "text": "Wealth"
  },
  {
    "objectID": "about.html#innovative-chart",
    "href": "about.html#innovative-chart",
    "title": "Quantifying International Prosperity",
    "section": "Innovative Chart",
    "text": "Innovative Chart"
  },
  {
    "objectID": "about.html#conclusion",
    "href": "about.html#conclusion",
    "title": "Quantifying International Prosperity",
    "section": "Conclusion",
    "text": "Conclusion"
  }
]