---
title: "lifeexp"
format: html
editor: visual
---

```{r}
library(reticulate)
reticulate::use_condaenv("base", required = TRUE)
```

```{python}
import pandas as pd
import plotly.graph_objects as go

#Import datasets for merging
df1 = pd.read_csv("Data_cleaned/overall.csv")
df2 = pd.read_csv("Data_cleaned/male.csv")
df3 = pd.read_csv("Data_cleaned/female.csv")
df4 = pd.read_csv("Data_cleaned/gdppc.csv")

#Merge on Country and Year columns
df5 = pd.merge(df1, df2, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df3, on=['Country', 'Year'], how='left')
df5 = pd.merge(df5, df4, on=['Country', 'Year'], how='left')
df5 = df5.drop_duplicates(['Country', 'Year'])
df5 = df5.rename(columns={'Overall': 'Life Expectancy'})
#Round GDP Per Capita
df5["GDP Per Capita (USD)"] = df5["GDP Per Capita (USD)"].round(2)
#Save merged data
df5.to_csv("Data_cleaned/lifeexpectancy.csv", index=False)
#Sort by GDP per capita highest to lowest
df5 = df5.sort_values(by='GDP Per Capita (USD)', ascending=False)

# Filter out null values for GDP per capita
df5 = df5.dropna(subset=['GDP Per Capita (USD)'])

# Create a function that will allow me to change plot based on year
def update_plot(year):
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()

    fig = go.Figure()

    # Add barplot
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        name='Life Expectancy',
        marker=dict(color='#96ceb4'),
        #tooltip
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']]
    ))

    # Add moving average line for life expectancy trend across gdp per capita
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name='Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']]
    ))

    # Layout settings
    fig.update_layout(
        title=f'Life Expectancy in {year} (Sorted by GDP Per Capita)',
        xaxis_title='Country',
        yaxis_title='Life Expectancy',
        xaxis_tickangle=-45,
        yaxis=dict(range=[60, 90]),
        barmode='group',
        legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
        hovermode='closest',
        plot_bgcolor='#faf0e6',
        width=1200,
        height=800
    )

    fig.show()


# All years to be displayed (1990-2022)
years = df5['Year'].unique().tolist()

# Create Plotly button
buttons = []
for year in years:
    button = dict(
        label=str(year),
        method="update",
        args=[{"visible": [year == y for y in years]}, {"title": f"Life Expectancy in {year} (Sorted by GDP Per Capita)"}],
    )
    buttons.append(button)

fig = go.Figure()

# Add barplot for each of the years
for year in years:
    year_df = df5[df5['Year'] == year]
    fig.add_trace(go.Bar(
        x=year_df['Country'],
        y=year_df['Life Expectancy'],
        marker = dict(color='#96ceb4'),
        name=str(year),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>Life Expectancy:</b> %{y}<br>' +
                      '<b>Male Life Expectancy:</b> %{customdata[1]}<br>' +
                      '<b>Female Life Expectancy:</b> %{customdata[2]}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[3]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'Male', 'Female', 'GDP Per Capita (USD)']],
        visible=(year == years[0])  # Have it so most recent year (2022) is default
    ));

# Add moving average line for each year
for year in years:
    year_df = df5[df5['Year'] == year].copy()
    window_size = 5
    year_df['Moving Average'] = year_df['Life Expectancy'].rolling(window=window_size).mean()
    fig.add_trace(go.Scatter(
        x=year_df['Country'],
        y=year_df['Moving Average'],
        mode='lines',
        name=f'{year} Life Expectancy Moving Average',
        line=dict(color='red', width=2),
        hovertemplate='<b>Country:</b> %{x}<br>' +
                      '<b>Year:</b> %{customdata[0]}<br>' +
                      '<b>5 Country Moving Average LE:</b> %{y}<br>' +
                      '<b>GDP Per Capita (USD):</b> $%{customdata[1]:,.2f}<extra></extra>',
        customdata=year_df[['Year', 'GDP Per Capita (USD)']],
        visible=(year == years[0])
    ));

# Find the minimum life expectancy across years
min_life_expectancy = df5['Life Expectancy'].min()

# Edit range of plot so bars fit nicely
y_axis_range = [min_life_expectancy - 3, 90]

# Update the layout
fig.update_layout(
    updatemenus=[
        dict(
            buttons=buttons,
            direction="down",
            pad={"r": 10, "t": 10},
            showactive=True,
            x=1.05,  # Moves button to top right of plot
            xanchor="right",
            y=1.0,
            yanchor="top"
        ),
    ],
    xaxis_title='Country',
    yaxis_title='Life Expectancy',
    xaxis_tickangle=-45,
    yaxis=dict(range=y_axis_range), 
    barmode='group',
    legend=dict(x=0, y=1.0, bgcolor='#faf0e6'),
    bargap=0.15,
    width=800,
    height= 520,
    bargroupgap=0.1,
    hovermode='closest',
    plot_bgcolor='#faf0e6',
    font_family = 'PT Sans Narrow',
    title=f"Life Expectancy in {years[0]} (Sorted by GDP Per Capita)"
);

fig.show()

```
